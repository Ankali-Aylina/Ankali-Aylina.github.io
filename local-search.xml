<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++算法学习-递归</title>
    <link href="/2025/07/25/C-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E9%80%92%E5%BD%92/"/>
    <url>/2025/07/25/C-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="仓库源代码：Github"><a href="#仓库源代码：Github" class="headerlink" title="仓库源代码：Github"></a>仓库源代码：<a href="https://github.com/Ankali-Aylina/CplusAlgo/tree/main/001-Recursion">Github</a></h2><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>递归函数是一种调用自身的函数。递归函数通常用于解决那些可以分解为相似子问题的问题。递归函数通常包含两个部分：基线条件（递归的终止条件）和递归条件（递归的调用）。</p><h2 id="递归实现等差数列求和"><a href="#递归实现等差数列求和" class="headerlink" title="递归实现等差数列求和"></a>递归实现等差数列求和</h2><ol><li><h3 id="问题描述及分析："><a href="#问题描述及分析：" class="headerlink" title="问题描述及分析："></a>问题描述及分析：</h3></li></ol><ul><li>问题描述：给定一个整数n，计算等差数列的第n项。等差数列的定义是：每一项与前一项的差是一个常数，这个常数称为公差。例如，等差数列1, 4, 7, 10, 13, …的公差是3。</li><li>分析：在这个等差数列中，第n项可以通过以下公式计算：<code>第n项 = 第(n-1)项 + 3</code>,需要注意的是，在第一项时<code>n = 1</code>同时这也是递归函数的约束条件。因此，我们可以使用递归函数来实现这个计算，即：如果n等于1，返回1；否则，返回<code>find(n-1) + 3</code>。</li></ul><ol start="2"><li><h3 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现:"></a>函数实现:</h3></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>    &#123;<br>        res = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        res = <span class="hljs-built_in">find</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-number">3</span>; <span class="hljs-comment">// 第n项等于前一项+3</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@brief 求解第n项的值</code></li><li><code>@param n 第n项</code></li><li><code>@return 第n项的值</code></li></ul><ol start="3"><li><h3 id="函数解析："><a href="#函数解析：" class="headerlink" title="函数解析："></a>函数解析：</h3></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>如果n等于1，那么返回1，这是递归的基线条件，即递归的终止条件。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">else</span><br>&#123;<br>    res = <span class="hljs-built_in">find</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果n不等于1，那么调用<code>find(n - 1)</code>来计算前一项，然后将前一项加上3，得到第n项。这是递归的条件，即递归的调用。</li></ul><ol start="4"><li><h3 id="代码演示-使用：pythontutor-com演示"><a href="#代码演示-使用：pythontutor-com演示" class="headerlink" title="代码演示(使用：pythontutor.com演示): "></a>代码演示(使用：<a href="https://pythontutor.com/render.html#code=int%20find%28int%20n%29%0A%7B%0A%20%20%20%20int%20res%3B%0A%20%20%20%20if%20%28n%20%3D%3D%201%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20res%20%3D%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20else%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20res%20%3D%20find%28n%20-%201%29%20%2B%203%3B%20//%20%E7%AC%ACn%E9%A1%B9%E7%AD%89%E4%BA%8E%E5%89%8D%E4%B8%80%E9%A1%B9%2B3%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20res%3B%0A%7D%0A%0Aint%20main%28%29%20%7B%0A%20%20find%285%29%3B%0A%20%20return%200%3B%0A%7D&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false">pythontutor.com</a>演示): <img src="%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E6%BC%94%E7%A4%BA.gif" srcset="/img/loading.gif" lazyload alt="代码演示"></h3></li></ol><h2 id="递归实现等比数列求和"><a href="#递归实现等比数列求和" class="headerlink" title="递归实现等比数列求和"></a>递归实现等比数列求和</h2><ol><li><h3 id="问题描述及分析：-1"><a href="#问题描述及分析：-1" class="headerlink" title="问题描述及分析："></a>问题描述及分析：</h3></li></ol><ul><li>问题描述：给定一个整数n和一个初始值a，计算等比数列的前n项。等比数列的定义是：每一项是前一项乘以一个常数，这个常数称为公比。例如，等比数列1, 2, 4, 8, 16, …的公比是2。</li><li>分析：在这个等比数列中，第n项可以通过以下公式计算：<code>第n项 = 第(n-1)项 * 2</code>,需要注意的是，在第一项时<code>n = 1</code>同时这也是递归函数的约束条件。因此，我们可以使用递归函数来实现这个计算，即：如果n等于1，返回a；否则，返回<code>geometricRatio(n - 1) * 2</code>。</li></ul><ol start="2"><li><h3 id="函数实现-1"><a href="#函数实现-1" class="headerlink" title="函数实现:"></a>函数实现:</h3></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">geometricRatio</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>    &#123;<br>        res = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        res = <span class="hljs-built_in">geometricRatio</span>(n - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@brief 求解第n项的值</code></li><li><code>@param n 第n项</code></li><li><code>@return 第n项的值</code></li></ul><ol start="3"><li><h3 id="函数解析：-1"><a href="#函数解析：-1" class="headerlink" title="函数解析："></a>函数解析：</h3></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>如果n等于1，那么返回2，这是递归的基线条件，即递归的终止条件。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">else</span><br>&#123;<br>    res = <span class="hljs-built_in">geometricRatio</span>(n - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果n不等于1，那么调用<code>geometricRatio(n - 1)</code>来计算前一项，然后将前一项乘以2，得到第n项。这是递归的条件，即递归的调用。</li></ul><ol start="4"><li><h3 id="代码演示-使用：pythontutor-com演示-1"><a href="#代码演示-使用：pythontutor-com演示-1" class="headerlink" title="代码演示(使用：pythontutor.com演示): "></a>代码演示(使用：<a href="https://pythontutor.com/render.html#code=%23include%3Ciostream%3E%0A%0Aint%20geometricRatio%28int%20n%29%0A%7B%0A%20%20%20%20int%20res%3B%0A%20%20%20%20if%20%28n%20%3D%3D%201%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20res%20%3D%202%3B%0A%20%20%20%20%7D%0A%20%20%20%20else%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20res%20%3D%20geometricRatio%28n%20-%201%29%20*%202%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20res%3B%0A%7D%0A%0Aint%20main%28%29%0A%7B%0A%20%20%20%20std%3A%3Acout%20%3C%3C%20geometricRatio%285%29%20%3C%3C%20std%3A%3Aendl%3B%0A%20%20%20%20return%200%3B%0A%7D&cumulative=false&curInstr=27&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false">pythontutor.com</a>演示): <img src="%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E6%BC%94%E7%A4%BA.gif" srcset="/img/loading.gif" lazyload alt="代码演示"></h3></li></ol><h2 id="递归实现阶乘"><a href="#递归实现阶乘" class="headerlink" title="递归实现阶乘"></a>递归实现阶乘</h2><ol><li><h3 id="问题描述及分析：-2"><a href="#问题描述及分析：-2" class="headerlink" title="问题描述及分析："></a>问题描述及分析：</h3></li></ol><ul><li>问题描述：给定一个整数n，计算n的阶乘。阶乘的定义是：n! &#x3D; n * (n-1) * (n-2) * … * 1。例如，5! &#x3D; 5 * 4 * 3 * 2 * 1 &#x3D; 120。</li><li>分析：在这个问题中，我们可以使用递归函数来实现计算阶乘。递归的基线条件是当n等于1时，返回1。否则，返回<code>factorial(n - 1) * n</code>。</li></ul><ol start="2"><li><h3 id="函数实现-2"><a href="#函数实现-2" class="headerlink" title="函数实现:"></a>函数实现:</h3></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>    &#123;<br>        res = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        res = <span class="hljs-built_in">factorial</span>(n - <span class="hljs-number">1</span>) * n;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@brief 求解n的阶乘</code></li><li><code>@param n 第n项</code></li><li><code>@return n的阶乘</code></li></ul><ol start="3"><li><h3 id="函数解析：-2"><a href="#函数解析：-2" class="headerlink" title="函数解析："></a>函数解析：</h3></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>如果n等于1，那么返回1，这是递归的基线条件，即递归的终止条件。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">else</span><br>&#123;<br>    res = <span class="hljs-built_in">factorial</span>(n - <span class="hljs-number">1</span>) * n;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果n不等于1，那么调用<code>factorial(n - 1)</code>来计算前一项，然后将前一项乘以n，得到n的阶乘。这是递归的条件，即递归的调用。</li></ul><ol start="4"><li><h3 id="代码演示-使用：pythontutor-com演示-2"><a href="#代码演示-使用：pythontutor-com演示-2" class="headerlink" title="代码演示(使用：pythontutor.com演示): "></a>代码演示(使用：<a href="https://pythontutor.com/render.html#code=%23include%3Ciostream%3E%0A%0Aint%20factorial%28int%20n%29%0A%7B%0A%20%20%20%20int%20res%3B%0A%20%20%20%20if%20%28n%20%3D%3D%201%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20res%20%3D%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20else%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20res%20%3D%20factorial%28n%20-%201%29%20*%20n%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20return%20res%3B%0A%7D%0A%0Aint%20main%28%29%0A%7B%0A%20%20%20%20std%3A%3Acout%20%3C%3C%20factorial%285%29%20%3C%3C%20std%3A%3Aendl%3B%0A%20%20%20%20return%200%3B%0A%7D&cumulative=false&curInstr=27&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=cpp_g%2B%2B9.3.0&rawInputLstJSON=%5B%5D&textReferences=false">pythontutor.com</a>演示): <img src="%E9%98%B6%E4%B9%98%E6%BC%94%E7%A4%BA.gif" srcset="/img/loading.gif" lazyload alt="代码演示"></h3></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++算法学习-创建新项目工具</title>
    <link href="/2025/07/22/C-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/07/22/C-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="C-算法学习"><a href="#C-算法学习" class="headerlink" title="C++算法学习"></a>C++算法学习</h1><p>这是一个记录C++算法学习的博客，记录一些算法的代码实现，算法的思路，算法的时间复杂度，算法的空间复杂度，算法的稳定性等等。<br>该项目使用VScode编写，使用C++编写，使用CMake构建项目，使用Git进行版本控制，使用GitHub进行代码托管。</p><h3 id="点击前往CPlusAlgo"><a href="#点击前往CPlusAlgo" class="headerlink" title="点击前往CPlusAlgo"></a><a href="https://github.com/Ankali-Aylina/CplusAlgo">点击前往CPlusAlgo</a></h3><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7">创建新项目工具</a><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90">代码解析</a></li></ul></li></ul><h2 id="创建新项目工具"><a href="#创建新项目工具" class="headerlink" title="创建新项目工具"></a>创建新项目工具</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这是一个用于创建新项目的工具，它可以帮助你快速地创建一个新的项目，并且可以自动生成项目的目录结构，包括源代码文件、头文件、测试文件等等。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>首先使用cmake生成项目文件</p> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cd <span class="hljs-number">000</span>-CreateNewProject<br>cmake -G <span class="hljs-string">&quot;MinGW Makefiles&quot;</span> -B build -S .<br>cd build &amp;&amp; cmake --build .<br></code></pre></td></tr></table></figure></li><li><p>运行生成的<code>000-CreateNewProject.exe</code>文件。</p> <figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pwsh">.\build\<span class="hljs-number">000</span><span class="hljs-literal">-CreateNewProject</span>\<span class="hljs-number">000</span><span class="hljs-literal">-CreateNewProject</span>.exe<br></code></pre></td></tr></table></figure><p> 目录结构如下：</p> <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">000</span>-CreateNewProject<br>├── <span class="hljs-keyword">build</span><br><span class="hljs-keyword"></span>│   └──<span class="hljs-built_in">Debug</span><br>│       ├── <span class="hljs-keyword">bin</span><br><span class="hljs-keyword"></span>│           ├── <span class="hljs-number">000</span>-CreateNewProject.exe<br>└<br></code></pre></td></tr></table></figure></li><li><p>根据提示输入项目名称，例如<code>000-CreateNewProject</code>。</p><ul><li>ps:项目名称不能包含空格，不能包含特殊字符，不能包含中文。<br> <img src="%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A01.png" srcset="/img/loading.gif" lazyload alt="程序演示"></li></ul></li></ol><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><ol><li><h4 id="bool-nameCheck-const-string-name-函数"><a href="#bool-nameCheck-const-string-name-函数" class="headerlink" title="bool nameCheck(const string &amp;name)函数"></a><code>bool nameCheck(const string &amp;name)</code>函数</h4><ul><li>该函数用于检查项目名称是否合法，如果项目名称包含空格、特殊字符或者中文，则返回false，否则返回true。</li><li><code>name</code> : 项目名称</li><li>该函数的实现如下：</li></ul><ol><li>判断项目名称是否为空，如果为空，则返回false。</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (name.<span class="hljs-built_in">empty</span>())<br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;文件夹名称不能为空！\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>name.empty()</code>函数用于判断字符串是否为空，如果为空，则返回true，否则返回false。</li></ul><ol start="2"><li>检查非法字符，如果项目名称包含非法字符，则返回false。</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> std::string invalid_chars = <span class="hljs-string">&quot;&lt;&gt;:\&quot;/\\|?*&quot;</span>;<br><span class="hljs-comment">// 遍历name中的每个字符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : name)<br>&#123;<br>    <span class="hljs-keyword">if</span> (invalid_chars.<span class="hljs-built_in">find</span>(c) != std::string::npos)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;名称包含非法字符: &#x27;&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-string">&quot;&#x27;\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 控制字符检查</span><br>    <span class="hljs-keyword">if</span> (std::<span class="hljs-built_in">iscntrl</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>&gt;(c)))<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;名称包含控制字符！\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>const std::string invalid_chars = &quot;&lt;&gt;:\&quot;/\\|?*&quot;</code> 定义了一个字符串，包含了所有非法字符。</li><li><code>for (char c : name)&#123;&#125;</code> 是一个范围for循环，用于遍历<code>name</code>中的每个字符<code>c</code>。</li><li><code>invalid_chars.find(c) != std::string::npos</code>中<ul><li><code>invalid_chars.find(c)</code>在非法字符集合中搜索当前字符 <code>c</code></li><li><code>!= std::string::npos</code> 如果找到了，则返回字符在字符串中的位置，否则返回<code>std::string::npos</code>。<ul><li><code>std::string::npos</code> 是一个特殊的值，表示字符串中没有找到指定的字符。</li><li>ex.<code>name</code>包含非法字符<code>*</code>则输出:<code>名称包含非法字符: &#39;*&#39;</code>并返回false。</li></ul></li></ul></li><li><code>std::iscntrl(static_cast&lt;unsigned char&gt;(c))</code>用于判断字符<code>c</code>是否为控制字符，如果是，则返回true，否则返回false。<ul><li><code>std::iscntrl</code>函数用于判断字符是否为控制字符，如果是，则返回true，否则返回false。</li><li><code>static_cast&lt;unsigned char&gt;(c)</code>将字符<code>c</code>转换为无符号字符。<ul><li><code>static_cast</code>是C++中的类型转换运算符，用于将一种类型转换为另一种类型。</li><li><code>unsigned char</code>是无符号字符类型，用于表示无符号字符。</li></ul></li></ul></li></ul><ol start="3"><li>检查项目名称是否是系统保留名称</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 检查保留名称 (Windows)</span><br><span class="hljs-type">const</span> std::vector&lt;std::string&gt; reserved_names = &#123;<br>    <span class="hljs-string">&quot;CON&quot;</span>, <span class="hljs-string">&quot;PRN&quot;</span>, <span class="hljs-string">&quot;AUX&quot;</span>, <span class="hljs-string">&quot;NUL&quot;</span>,<br>    <span class="hljs-string">&quot;COM1&quot;</span>, <span class="hljs-string">&quot;COM2&quot;</span>, <span class="hljs-string">&quot;COM3&quot;</span>, <span class="hljs-string">&quot;COM4&quot;</span>, <span class="hljs-string">&quot;COM5&quot;</span>, <span class="hljs-string">&quot;COM6&quot;</span>, <span class="hljs-string">&quot;COM7&quot;</span>, <span class="hljs-string">&quot;COM8&quot;</span>, <span class="hljs-string">&quot;COM9&quot;</span>,<br>    <span class="hljs-string">&quot;LPT1&quot;</span>, <span class="hljs-string">&quot;LPT2&quot;</span>, <span class="hljs-string">&quot;LPT3&quot;</span>, <span class="hljs-string">&quot;LPT4&quot;</span>, <span class="hljs-string">&quot;LPT5&quot;</span>, <span class="hljs-string">&quot;LPT6&quot;</span>, <span class="hljs-string">&quot;LPT7&quot;</span>, <span class="hljs-string">&quot;LPT8&quot;</span>, <span class="hljs-string">&quot;LPT9&quot;</span>&#125;;<br><br><span class="hljs-comment">// 转换为大写以检查保留名称</span><br>std::string upper_name = name;<br>std::<span class="hljs-built_in">transform</span>(upper_name.<span class="hljs-built_in">begin</span>(), upper_name.<span class="hljs-built_in">end</span>(), upper_name.<span class="hljs-built_in">begin</span>(), ::toupper);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;reserved : reserved_names)<br>&#123;<br>    <span class="hljs-keyword">if</span> (upper_name == reserved)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;名称 &#x27;&quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;&#x27; 是系统保留名称！\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>const std::vector&lt;std::string&gt; reserved_names = &#123;&quot;CON&quot;, &quot;PRN&quot;, &quot;AUX&quot;, &quot;NUL&quot;, &quot;COM1&quot;, &quot;COM2&quot;, &quot;COM3&quot;, &quot;COM4&quot;, &quot;COM5&quot;, &quot;COM6&quot;, &quot;COM7&quot;, &quot;COM8&quot;, &quot;COM9&quot;, &quot;LPT1&quot;, &quot;LPT2&quot;, &quot;LPT3&quot;, &quot;LPT4&quot;, &quot;LPT5&quot;, &quot;LPT6&quot;, &quot;LPT7&quot;, &quot;LPT8&quot;, &quot;LPT9&quot;&#125;;</code> 定义了一个字符串向量，包含了所有系统保留名称。</li><li><code>std::string upper_name = name;</code> 将项目名称转换为小写。</li><li><code>std::transform(upper_name.begin(), upper_name.end(), upper_name.begin(), ::toupper);</code> 将项目名称中的每个字符转换为大写。<ul><li><code>std::transform()</code>函数用于将一个范围内的元素转换为另一个值。</li><li><code>upper_name.begin()</code>和<code>upper_name.end()</code>是迭代器，表示<code>upper_name</code>的开始和结束位置。</li><li><code>::toupper</code>是一个函数对象，用于将字符转换为大写。</li></ul></li><li><code>for (const auto &amp;reserved : reserved_names)&#123;&#125;</code> 是一个范围for循环，用于遍历<code>reserved_names</code>中的每个字符串<code>reserved</code>。</li><li><code>if (upper_name == reserved)&#123;&#125;</code> 判断项目名称是否是系统保留名称，如果是，则返回false。</li></ul><ol start="4"><li>检查项目名称开头和结尾是否</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 检查开头和结尾的非法字符</span><br><span class="hljs-keyword">if</span> (name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27; &#x27;</span> || name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;.&#x27;</span>)<br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;名称不能以空格或点开头！\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27; &#x27;</span> || name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;.&#x27;</span>)<br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;名称不能以空格或点结尾！\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>name.front()</code>和<code>name.back()</code>分别表示项目名称的第一个字符和最后一个字符。</li></ul><ol start="5"><li>检查名称长度</li></ol> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 检查名称长度</span><br><span class="hljs-keyword">if</span> (name.<span class="hljs-built_in">length</span>() &gt; <span class="hljs-number">255</span>)<br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;名称过长（最大255字符）！\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>name.length()</code>函数用于获取项目名称的长度。</li></ul></li><li><h3 id="bool-createFolder-const-fs-path-parent-path-const-string-folderName-函数"><a href="#bool-createFolder-const-fs-path-parent-path-const-string-folderName-函数" class="headerlink" title="bool createFolder(const fs::path &amp;parent_path, const string &amp;folderName);函数"></a><code>bool createFolder(const fs::path &amp;parent_path, const string &amp;folderName);</code>函数</h3><ul><li><p>该函数用于创建文件夹，如果文件夹创建失败返回false，否则返回true。</p></li><li><p><code>parent_path</code> : 父路径</p></li><li><p><code>folderName</code> : 文件夹名称</p></li><li><p>该函数的实现如下：</p><ol><li>拼接父路径和文件夹名称，得到创建路径，如果文件夹已存在，输出提示信息并返回false。</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 拼接父路径和文件夹名称，得到创建路径</span><br>fs::path createPath = parent_path / folderName;<br><span class="hljs-comment">// 如果文件夹已存在，输出提示信息并返回false</span><br><span class="hljs-keyword">if</span> (fs::<span class="hljs-built_in">exists</span>(createPath))<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;文件夹已存在&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>fs::path</code>是C++17中引入的文件系统库中的类，用于表示文件路径。</li><li><code>parent_path / folderName</code>表示将父路径和文件夹名称拼接起来，得到创建路径。</li><li><code>fs::exists(createPath)</code>函数用于判断路径是否存在，如果存在返回true，否则返回false。</li></ul><ol start="2"><li>尝试创建文件夹，如果创建文件夹成功，输出成功信息并返回true，否则输出失败信息并返回false。</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果创建文件夹成功，输出成功信息并返回true</span><br><span class="hljs-keyword">if</span> (fs::<span class="hljs-built_in">create_directory</span>(createPath))<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;成功创建文件夹: &quot;</span> &lt;&lt; createPath &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// 如果创建文件夹失败，输出失败信息并返回false</span><br>cerr &lt;&lt; <span class="hljs-string">&quot;无法创建文件夹: &quot;</span> &lt;&lt; createPath &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><ul><li><code>fs::create_directory(createPath)</code>函数用于创建文件夹，如果创建成功返回true，否则返回false。</li><li><code>cerr</code>是C++标准库中的错误输出流，用于输出错误信息。</li></ul><ol start="3"><li>捕获文件系统错误，输出错误信息并返回false。</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 捕获文件系统错误，输出错误信息并返回false</span><br><span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> fs::filesystem_error &amp;e)<br>&#123;<br>    cerr &lt;&lt; <span class="hljs-string">&quot;文件系统错误: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>catch (const fs::filesystem_error &amp;e)</code>用于捕获文件系统错误，<code>e.what()</code>函数用于获取错误信息。</li></ul></li></ul></li><li><h3 id="optional-findAimFolder-const-fs-path-start-path-const-string-target-name-bool-find-all-false-bool-stop-at-first-false-函数"><a href="#optional-findAimFolder-const-fs-path-start-path-const-string-target-name-bool-find-all-false-bool-stop-at-first-false-函数" class="headerlink" title="optional&lt;fs::path&gt; findAimFolder(const fs::path &amp;start_path, const string &amp;target_name, bool find_all = false, bool stop_at_first = false);函数"></a><code>optional&lt;fs::path&gt; findAimFolder(const fs::path &amp;start_path, const string &amp;target_name, bool find_all = false, bool stop_at_first = false);</code>函数</h3><ul><li><p>该函数用于查找目标文件夹，如果找到目标文件夹，返回目标文件夹的路径，否则返回空值。</p></li><li><p><code>start_path</code> : 查找的起始路径</p></li><li><p><code>target_name</code> : 目标文件夹名称</p></li><li><p><code>find_all</code> : 是否查找所有目标文件夹，默认为false</p></li><li><p><code>stop_at_first</code> : 是否在找到第一个目标文件夹后停止查找，默认为false</p></li><li><p>该函数的实现如下：</p><ol><li>先创建存储文件路径的动态数组容器，然后获取当前路径的绝对路径，记录根路径用于终止循环，限制最大向上搜索层数，初始化当前搜索层数。</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 存储所有匹配路径的容器</span><br>vector&lt;fs::path&gt; matches;<br><br><span class="hljs-comment">// 获取绝对路径确保路径解析正确</span><br>fs::path current = fs::<span class="hljs-built_in">absolute</span>(start_path);<br><br><span class="hljs-comment">// 记录根路径用于终止循环</span><br><span class="hljs-type">const</span> fs::path root = current.<span class="hljs-built_in">root_path</span>();<br><br><span class="hljs-comment">// 最大向上搜索层数，限制深度</span><br><span class="hljs-type">int</span> max_depth = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> current_depth = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ul><li><code>vector&lt;fs::path&gt; matches;</code>创建了一个动态数组容器，用于存储所有匹配的路径。<ul><li><code>vector&lt;元素类型&gt; 向量名</code> C++ 的动态数组容器，可自动扩容，<code>元素类型</code>指的是数组中元素的类型，<code>向量名</code>是数组的名字。</li></ul></li><li><code>fs::path current = fs::absolute(start_path);</code>获取当前路径的绝对路径，确保路径解析正确。<ul><li><code>fs::absolute()</code>函数用于获取路径的绝对路径。</li></ul></li><li><code>const fs::path root = current.root_path();</code>记录根路径用于终止循环。<ul><li><code>root_path()</code>函数用于获取路径的根路径。</li></ul></li></ul><ol start="2"><li>循环向上遍历目录树，检查当前目录名是否匹配目标，如果匹配则将匹配路径添加到结果集，如果设置了找到即停止且不需要所有结果，则返回第一个匹配项，到达根目录时停止遍历，如果无法继续向上，则停止遍历，移动到父目录继续搜索。</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-comment">// 循环向上遍历目录树</span><br><span class="hljs-keyword">while</span> (current_depth++ &lt; max_depth &amp;&amp; current != root)<br>&#123;<br>    <span class="hljs-comment">// 调试输出当前检查的路径 (实际使用时可以移除)</span><br>    <span class="hljs-comment">// std::cout &lt;&lt; &quot;检查: &quot; &lt;&lt; current &lt;&lt; std::endl;</span><br><br>    <span class="hljs-comment">// 检查当前目录名是否匹配目标</span><br>    <span class="hljs-keyword">if</span> (current.<span class="hljs-built_in">filename</span>() == target_name)<br>    &#123;<br>        <span class="hljs-comment">// 将匹配路径添加到结果集</span><br>        matches.<span class="hljs-built_in">push_back</span>(current);<br><br>        <span class="hljs-comment">// 如果设置了找到即停止且不需要所有结果</span><br>        <span class="hljs-keyword">if</span> (stop_at_first &amp;&amp; !matches.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span> matches.<span class="hljs-built_in">front</span>(); <span class="hljs-comment">// 返回第一个匹配项</span><br>        &#125;<br>    &#125;<br>            <span class="hljs-comment">// 到达根目录时停止遍历 (防止无限循环)</span><br>    <span class="hljs-keyword">if</span> (current == root)<br>    &#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取父目录 (当已经是根目录时，parent_path()返回自身)</span><br>    fs::path parent = current.<span class="hljs-built_in">parent_path</span>();<br><br>    <span class="hljs-comment">// 检查是否无法继续向上 (文件系统保护机制)</span><br>    <span class="hljs-keyword">if</span> (parent == current)<br>    &#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动到父目录继续搜索</span><br>    current = parent;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>while (current_depth++ &lt; max_depth &amp;&amp; current != root)</code>循环向上遍历目录树，直到到达根目录或达到最大搜索层数。</li><li><code>if (current.filename() == target_name)</code>检查当前目录名是否匹配目标。<ul><li><code>filename()</code>函数用于获取路径的文件名。</li><li><code>matches.push_back(current)</code>将匹配路径添加到结果集。</li></ul></li><li><code>if (stop_at_first &amp;&amp; !matches.empty())</code>如果设置了找到即停止且不需要所有结果，则返回第一个匹配项。<ul><li><code>!matches.empty()</code>判断结果集是否为空。</li></ul></li><li><code>if (current == root)</code>到达根目录时停止遍历。</li><li><code>fs::path parent = current.parent_path()</code>获取父目录。<ul><li><code>parent_path()</code>函数用于获取路径的父目录。</li></ul></li><li><code>if (parent == current)</code>检查是否无法继续向上。<ul><li><code>parent == current</code>判断父目录是否与当前目录相同，如果相同则表示无法继续向上。</li></ul></li><li><code>current = parent</code>移动到父目录继续搜索。</li></ul><ol start="3"><li>根据查找结果返回相应的值。</li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 处理查找结果</span><br><span class="hljs-keyword">if</span> (matches.<span class="hljs-built_in">empty</span>())<br>&#123;<br>    <span class="hljs-comment">// 没有找到匹配项</span><br>    <span class="hljs-keyword">return</span> std::<span class="hljs-literal">nullopt</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (find_all)<br>&#123;<br>    <span class="hljs-comment">// 返回所有匹配路径 (实际实现需要修改返回类型)</span><br>    <span class="hljs-comment">// 此处简化处理返回最近的一个匹配项</span><br>    <span class="hljs-keyword">return</span> matches.<span class="hljs-built_in">back</span>(); <span class="hljs-comment">// 最近的祖先目录</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">// 默认返回最近(最上层)的匹配项</span><br>    <span class="hljs-keyword">return</span> matches.<span class="hljs-built_in">back</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>if (matches.empty())</code>如果没有找到匹配项，则返回空值。<ul><li><code>std::nullopt</code>表示空值。</li></ul></li><li><code>else if (find_all)</code>如果设置了查找所有目标文件夹，则返回所有匹配路径。<ul><li><code>matches.back()</code>返回最近的一个匹配项。</li></ul></li><li><code>else</code>默认返回最近(最上层)的匹配项。<ul><li><code>matches.back()</code>返回最近的一个匹配项。</li></ul></li></ul></li></ul></li><li><h3 id="void-copyFiles-const-fs-path-src-const-fs-path-dst-函数"><a href="#void-copyFiles-const-fs-path-src-const-fs-path-dst-函数" class="headerlink" title="void copyFiles(const fs::path &amp;src, const fs::path &amp;dst)函数"></a><code>void copyFiles(const fs::path &amp;src, const fs::path &amp;dst)</code>函数</h3><ul><li>该函数用于复制文件，将源文件复制到目标文件夹。</li><li><code>src</code> : 源文件路径</li><li><code>dst</code> : 目标文件夹路径</li><li>该函数的实现如下：</li></ul> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;std::future&lt;<span class="hljs-type">void</span>&gt;&gt; futures; <span class="hljs-comment">// 存储异步任务的结果</span><br><br><span class="hljs-comment">// 原子计数器：用于线程安全的进度跟踪</span><br>std::atomic&lt;<span class="hljs-type">int</span>&gt; filesCopied = <span class="hljs-number">0</span>;       <span class="hljs-comment">// 已复制的文件数</span><br>std::atomic&lt;<span class="hljs-type">int</span>&gt; directoriesCopied = <span class="hljs-number">0</span>; <span class="hljs-comment">// 已复制的目录数</span><br>std::atomic&lt;<span class="hljs-type">int</span>&gt; tasksCompleted = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 新增：跟踪完成的任务数（含失败）</span><br>std::atomic&lt;<span class="hljs-type">int</span>&gt; copyErrors = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 新增：错误计数器</span><br>std::mutex errorMutex;                  <span class="hljs-comment">// 新增：保护错误输出</span><br><br>    <span class="hljs-comment">// 获取开始时间（用于计算速度）</span><br><span class="hljs-keyword">auto</span> startTime = std::chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br><span class="hljs-keyword">auto</span> showProgress = [&amp;]()<br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> totalTasks = futures.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> completed = tasksCompleted; <span class="hljs-comment">// 使用tasksCompleted替代filesCopied+directoriesCopied</span><br><br>    <span class="hljs-keyword">auto</span> duration = std::chrono::steady_clock::<span class="hljs-built_in">now</span>() - startTime;<br>    <span class="hljs-type">double</span> seconds = std::chrono::<span class="hljs-built_in">duration</span>&lt;<span class="hljs-type">double</span>&gt;(duration).<span class="hljs-built_in">count</span>();<br>    <span class="hljs-type">double</span> progress = (totalTasks &gt; <span class="hljs-number">0</span>) ? (<span class="hljs-number">100.0</span> * completed / totalTasks) : <span class="hljs-number">0.0</span>;<br>    <span class="hljs-type">double</span> speed = (seconds &gt; <span class="hljs-number">0.1</span>) ? (filesCopied / seconds) : <span class="hljs-number">0.0</span>;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\r进度: &quot;</span> &lt;&lt; std::fixed &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">1</span>)<br>              &lt;&lt; progress &lt;&lt; <span class="hljs-string">&quot;% | &quot;</span><br>              &lt;&lt; <span class="hljs-string">&quot;文件: &quot;</span> &lt;&lt; filesCopied<br>              &lt;&lt; <span class="hljs-string">&quot; | 目录: &quot;</span> &lt;&lt; directoriesCopied<br>              &lt;&lt; <span class="hljs-string">&quot; | 错误: &quot;</span> &lt;&lt; copyErrors <span class="hljs-comment">// 显示错误计数</span><br>              &lt;&lt; <span class="hljs-string">&quot; | 速度: &quot;</span> &lt;&lt; std::<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">1</span>) &lt;&lt; speed &lt;&lt; <span class="hljs-string">&quot; 文件/秒&quot;</span><br>              &lt;&lt; <span class="hljs-string">&quot; | 任务: &quot;</span> &lt;&lt; completed &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; totalTasks<br>              &lt;&lt; std::flush;<br>&#125;;<br><br><span class="hljs-comment">// 确保目标目录存在（加入异常处理）</span><br><span class="hljs-keyword">try</span><br>&#123;<br>    fs::<span class="hljs-built_in">create_directories</span>(dst);    <span class="hljs-comment">// 创建目标目录</span><br>&#125;<br><span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>&#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;创建目标目录失败: &quot;</span> &lt;&lt; dst &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;entry : fs::<span class="hljs-built_in">directory_iterator</span>(src))<br>&#123;<br>    <span class="hljs-keyword">auto</span> target = dst / entry.<span class="hljs-built_in">path</span>().<span class="hljs-built_in">filename</span>();    <span class="hljs-comment">// 目标路径</span><br><br>    <span class="hljs-keyword">if</span> (fs::<span class="hljs-built_in">is_directory</span>(entry))<br>    &#123;<br>        futures.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">async</span>(std::launch::async, [=, &amp;directoriesCopied, &amp;tasksCompleted, &amp;copyErrors, &amp;errorMutex]<br>                                     &#123;<br>                                         <span class="hljs-keyword">try</span><br>                                         &#123;<br>                                             <span class="hljs-comment">// 尝试创建子目录</span><br>                                             fs::<span class="hljs-built_in">create_directories</span>(target);<br>                                             <span class="hljs-comment">// 递归复制（可能抛出异常）</span><br>                                             fs::<span class="hljs-built_in">copy</span>(entry, target, fs::copy_options::recursive | fs::copy_options::overwrite_existing);<br>                                             directoriesCopied++;<br>                                         &#125;<br>                                         <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>                                         &#123;<br>                                             std::lock_guard&lt;std::mutex&gt; <span class="hljs-built_in">lock</span>(errorMutex);<br>                                             std::cerr &lt;&lt; <span class="hljs-string">&quot;\n目录复制错误: &quot;</span> &lt;&lt; entry.<span class="hljs-built_in">path</span>() &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; target<br>                                                       &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>                                             copyErrors++;<br>                                         &#125;<br>                                         tasksCompleted++; <span class="hljs-comment">// 无论成功失败都标记任务完成</span><br>                                     &#125;));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fs::<span class="hljs-built_in">is_regular_file</span>(entry))<br>    &#123;<br>        futures.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">async</span>(std::launch::async, [=, &amp;filesCopied, &amp;tasksCompleted, &amp;copyErrors, &amp;errorMutex]<br>                                     &#123;<br>                                         <span class="hljs-keyword">try</span><br>                                         &#123;<br>                                            <span class="hljs-comment">// 尝试复制文件</span><br>                                             fs::<span class="hljs-built_in">copy_file</span>(entry, target, fs::copy_options::overwrite_existing);<br>                                             filesCopied++;<br>                                         &#125;<br>                                         <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>                                         &#123;<br>                                             std::lock_guard&lt;std::mutex&gt; <span class="hljs-built_in">lock</span>(errorMutex);<br>                                             std::cerr &lt;&lt; <span class="hljs-string">&quot;\n文件复制错误: &quot;</span> &lt;&lt; entry.<span class="hljs-built_in">path</span>() &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; target<br>                                                       &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>                                             copyErrors++;<br>                                         &#125;<br>                                         tasksCompleted++; <span class="hljs-comment">// 无论成功失败都标记任务完成</span><br>                                     &#125;));<br>    &#125;<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;开始复制，总任务数: &quot;</span> &lt;&lt; futures.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-comment">// 修改循环条件：基于tasksCompleted而非成功计数</span><br><span class="hljs-keyword">while</span> (tasksCompleted &lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(futures.<span class="hljs-built_in">size</span>()))<br>&#123;<br>    <span class="hljs-built_in">showProgress</span>();<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">200</span>));<br>&#125;<br><br><span class="hljs-built_in">showProgress</span>();<br>std::cout &lt;&lt; <span class="hljs-string">&quot;\n复制完成! &quot;</span>;<br><br><span class="hljs-comment">// 处理异步任务中的异常（防止未捕获异常传播）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;f : futures)<br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        f.<span class="hljs-built_in">get</span>(); <span class="hljs-comment">// 获取异步结果（可能重新抛出异常）</span><br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>    &#123;<br>        <span class="hljs-comment">// 此处异常已在任务内处理过，此处仅确保不会终止程序</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">auto</span> endTime = std::chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><span class="hljs-keyword">auto</span> duration = std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(endTime - startTime);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;总耗时: &quot;</span> &lt;&lt; duration.<span class="hljs-built_in">count</span>() / <span class="hljs-number">1000.0</span> &lt;&lt; <span class="hljs-string">&quot; 秒 | 错误总数: &quot;</span> &lt;&lt; copyErrors &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><code>std::vector&lt;std::future&lt;void&gt;&gt; futures;</code>用于存储异步任务的结果。<ul><li><code>std::future&lt;void&gt;</code>表示一个异步操作的状态。</li></ul></li><li><code>std::atomic&lt;int&gt; filesCopied = 0;</code>：用于记录已复制的文件数。</li><li><code>std::atomic&lt;int&gt; directoriesCopied = 0;</code>：用于记录已复制的目录数。</li><li><code>std::atomic&lt;int&gt; tasksCompleted = 0;</code>：跟踪已完成的任务数(包含失败的任务数)。<ul><li>ps.使用atomic(原子操作)可以避免多线程同时修改时的数据竞争。</li></ul></li><li><code>std::mutex errorMutex;</code>：用于保护错误计数器，防止多线程同时修改时出现数据竞争。</li><li><code>auto startTime = std::chrono::steady_clock::now();</code>获取开始时间（用于计算速度）。</li><li><code>auto showProgress = [&amp;]() &#123;...&#125;;</code>进度显示函数，用于显示复制进度。<ul><li><p><code>const int totalTasks = futures.size();</code>获取总任务数。</p></li><li><p><code>const int completed = tasksCompleted;</code>获取已完成任务数。</p></li><li><p><code>auto duration = std::chrono::steady_clock::now() - startTime;</code>计算耗时。</p></li><li><p><code>double seconds = std::chrono::duration&lt;double&gt;(duration).count();</code>将耗时转换为秒。</p><ul><li><h4 id="duration模板的基本结构："><a href="#duration模板的基本结构：" class="headerlink" title="duration模板的基本结构："></a><code>duration</code>模板的基本结构：</h4>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Rep</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Period</span> = std::ratio&lt;<span class="hljs-number">1</span>&gt;&gt;<br><span class="hljs-keyword">class</span> duration;<br></code></pre></td></tr></table></figure><ul><li><h4 id="Rep-数值类型（如int-double等）"><a href="#Rep-数值类型（如int-double等）" class="headerlink" title="Rep:数值类型（如int, double等）"></a><code>Rep</code>:数值类型（如int, double等）</h4></li><li><h4 id="Period-时间单位（默认秒），使用std-ratio表示分数单位"><a href="#Period-时间单位（默认秒），使用std-ratio表示分数单位" class="headerlink" title="Period:时间单位（默认秒），使用std::ratio表示分数单位"></a><code>Period</code>:时间单位（默认秒），使用std::ratio表示分数单位</h4></li></ul><table><thead><tr><th>常用类型</th><th>等价表示</th><th>说明</th></tr></thead><tbody><tr><td><code>std::ratio&lt;1&gt;</code></td><td>1秒</td><td>默认单位</td></tr><tr><td><code>std::ratio&lt;1,1000&gt;</code></td><td>1毫秒</td><td>千分之一秒</td></tr><tr><td><code>std::ratio&lt;1,1000000&gt;</code></td><td>1微秒</td><td>百万分之一秒</td></tr></tbody></table></li><li><h4 id="std-chrono-duration类型部分"><a href="#std-chrono-duration类型部分" class="headerlink" title="std::chrono::duration&lt;double&gt;类型部分"></a><code>std::chrono::duration&lt;double&gt;</code>类型部分</h4><ol><li>这是模板类的类型声明</li><li><code>double</code>表示内部存储类型为双精度浮点数</li><li>时间单位为秒（默认std::ratio&lt;1&gt;）</li><li>ps.可以通过修改<code>duration</code>为<code>milliseconds</code>来使用毫秒模板。</li></ol><ul><li>ex. <code>std::chrono::milliseconds</code></li></ul></li><li><h4 id="duration-变量部分"><a href="#duration-变量部分" class="headerlink" title="(duration)变量部分"></a><code>(duration)</code>变量部分</h4><ol><li>这是一个已经存在的duration对象</li><li>实际要转换的时间间隔值</li><li>通常通过时间点计算得到</li></ol></li><li><p><code>std::chrono::duration&lt;double&gt;(duration)</code>属于类型转换部分</p><ol><li>创建新的duration对象</li><li>指定内部存储类型为double（浮点数）</li><li>自动转换为以秒为单位的持续时间</li></ol></li><li><p><code>.count()</code> 提取数值</p><ol><li>返回duration对象内部存储的数值</li><li>由于指定为double类型，返回值为双精度浮点数</li></ol></li></ul></li><li><p><code>double progress = (totalTasks &gt; 0) ? (100.0 * completed / totalTasks) : 0.0;</code> 当任务数大于0时，计算进度百分比，否则进度为0。</p></li><li><p><code>double speed = (seconds &gt; 0.1) ? (filesCopied / seconds) : 0.0;</code> ：当耗时超过0.1秒时，计算平均速度，否则速度为0。</p></li><li><p><code>std::cout &lt;&lt; &quot;\r进度: &quot; &lt;&lt; std::fixed &lt;&lt; std::setprecision(1)</code></p><ul><li><code>\r</code> 回车符，使光标回到行首，用于覆盖之前的内容。</li><li><code>std::fixed</code> 设置浮点数输出为固定小数点格式。</li><li><code>std::setprecision(1)</code> 设置输出精度为1位小数。</li></ul></li><li><p><code>&lt;&lt; std::flush;</code></p><ul><li><code>std::flush</code> 强制刷新输出缓冲区，确保输出立即显示，而不是等待缓冲区满或程序结束。</li></ul></li><li><p>创建目录异常处理</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-keyword">try</span><br>&#123;<br>    fs::<span class="hljs-built_in">create_directories</span>(dst);<br>&#125;<br><span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>&#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;创建目标目录失败: &quot;</span> &lt;&lt; dst &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>fs::create_directories(dst);</code> 创建目标目录</li><li><code>catch (const std::exception &amp;e)</code> 捕获异常</li><li><code>std::cerr &lt;&lt; &quot;创建目标目录失败: &quot; &lt;&lt; dst &lt;&lt; &quot; - &quot; &lt;&lt; e.what() &lt;&lt; std::endl;</code> 输出错误信息</li></ul></li><li><p><code>for (const auto &amp;entry : fs::directory_iterator(src))</code></p><ul><li><code>fs::directory_iterator(src)</code> 创建一个迭代器，用于遍历源目录中的所有条目。</li><li><code>for (const auto &amp;entry : ...)</code> 遍历每个条目。</li><li><code>const auto &amp;entry</code> 使用常量引用，避免不必要的拷贝，同时保证条目不会被修改。</li></ul></li><li><p><code>auto target = dst / entry.path().filename();</code></p><ul><li><code>dst / entry.path().filename()</code> 使用<code>/</code>运算符将目标目录与条目的文件名连接起来，生成目标路径。</li><li><code>entry.path().filename()</code> 获取条目的文件名或目录名。</li></ul></li><li><p><code>fs::is_directory(entry)</code></p><ul><li>判断条目是否为目录。</li></ul></li><li><p><code> fs::create_directories(target);</code></p><ul><li>创建目标目录</li></ul></li><li><h4 id="创建异步任务复制子目录"><a href="#创建异步任务复制子目录" class="headerlink" title="创建异步任务复制子目录"></a>创建异步任务复制子目录</h4>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">futures.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">async</span>(std::launch::async, [=, &amp;directoriesCopied, &amp;tasksCompleted, &amp;copyErrors, &amp;errorMutex]<br>                                        &#123;<br>                                            <span class="hljs-keyword">try</span><br>                                            &#123;<br>                                                <span class="hljs-comment">// 尝试创建子目录</span><br>                                                fs::<span class="hljs-built_in">create_directories</span>(target);<br>                                                <span class="hljs-comment">// 递归复制（可能抛出异常）</span><br>                                                fs::<span class="hljs-built_in">copy</span>(entry, target, fs::copy_options::recursive | fs::copy_options::overwrite_existing);<br>                                                directoriesCopied++;<br>                                            &#125;<br>                                            <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>                                            &#123;<br>                                                std::lock_guard&lt;std::mutex&gt; <span class="hljs-built_in">lock</span>(errorMutex);<br>                                                std::cerr &lt;&lt; <span class="hljs-string">&quot;\n目录复制错误: &quot;</span> &lt;&lt; entry.<span class="hljs-built_in">path</span>() &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; target<br>                                                        &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>                                                copyErrors++;<br>                                            &#125;<br>                                            tasksCompleted++; <span class="hljs-comment">// 无论成功失败都标记任务完成</span><br>                                        &#125;));<br></code></pre></td></tr></table></figure><ul><li><code>futures.push_back(...);</code> 将异步任务的结果存储在<code>futures</code>向量中，以便稍后处理。</li><li><code>std::async(std::launch::async, [=, &amp;directoriesCopied] &#123;...&#125;);</code> 创建一个异步任务<ul><li><code>std::async</code>: 异步任务创建函数</li><li><code>std::launch::async</code>: 启动策略，表示任务将在另一个线程中异步执行。</li><li><code>[=, &amp;directoriesCopied]</code>: 捕获列表，按值捕获所有变量，按引用捕获<code>directoriesCopied</code>。</li><li><code>&#123;...&#125;</code>: 异步任务的内容，使用lambda表达式定义。</li></ul></li><li><code>try &#123;...&#125; catch (const std::exception &amp;e) &#123;...&#125;</code> 异常处理<ul><li><code>try &#123;...&#125;</code> 尝试创建子目录并复制整个子目录，递归复制，覆盖已存在的文件。</li><li><code>catch (const std::exception &amp;e) &#123;...&#125;</code> 捕获异常<ul><li><code>std::lock_guard&lt;std::mutex&gt; lock(errorMutex);</code> 创建互斥锁，保证在多线程环境下安全地访问共享资源。</li><li><code>std::cerr &lt;&lt; &quot;\n目录复制错误: &quot; &lt;&lt; entry.path() &lt;&lt; &quot; -&gt; &quot; &lt;&lt; target &lt;&lt; &quot; - &quot; &lt;&lt; e.what() &lt;&lt; std::endl;</code> 输出错误信息</li></ul></li></ul></li><li><code>fs::copy(entry, target, fs::copy_options::recursive | fs::copy_options::overwrite_existing);</code> 复制整个子目录，递归复制，覆盖已存在的文件。<ul><li><code>fs::copy</code>: 复制函数</li><li><code>entry</code>: 源路径</li><li><code>target</code>: 目标路径</li><li><code>fs::copy_options::recursive</code>: 递归复制子目录</li><li><code>fs::copy_options::overwrite_existing</code>: 覆盖已存在的文件</li></ul></li><li><code>directoriesCopied++;</code> 原子递增目录计数器。</li></ul></li><li><p><code>else if (fs::is_regular_file(entry))</code><br>  -<code>判断条目是否为普通文件。</code></p></li><li><h4 id="创建异步任务复制文件"><a href="#创建异步任务复制文件" class="headerlink" title="创建异步任务复制文件"></a>创建异步任务复制文件</h4>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">futures.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">async</span>(std::launch::async, [=, &amp;filesCopied, &amp;tasksCompleted, &amp;copyErrors, &amp;errorMutex]<br>                                        &#123;<br>                                            <span class="hljs-keyword">try</span><br>                                            &#123;<br>                                                fs::<span class="hljs-built_in">copy_file</span>(entry, target, fs::copy_options::overwrite_existing);<br>                                                filesCopied++;<br>                                            &#125;<br>                                            <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>                                            &#123;<br>                                                std::lock_guard&lt;std::mutex&gt; <span class="hljs-built_in">lock</span>(errorMutex);<br>                                                std::cerr &lt;&lt; <span class="hljs-string">&quot;\n文件复制错误: &quot;</span> &lt;&lt; entry.<span class="hljs-built_in">path</span>() &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; target<br>                                                        &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>                                                copyErrors++;<br>                                            &#125;<br>                                            tasksCompleted++; <span class="hljs-comment">// 无论成功失败都标记任务完成</span><br>                                        &#125;));<br></code></pre></td></tr></table></figure><ul><li><code>futures.push_back(...);</code> 将异步任务的结果存储在<code>futures</code>向量中，以便稍后处理。</li><li><code>std::async(std::launch::async, [=, &amp;filesCopied] &#123;...&#125;);</code> 创建一个异步任务<ul><li><code>std::launch::async</code>: 启动策略，表示任务将在另一个线程中异步执行。</li><li><code>[=, &amp;filesCopied]</code>: 捕获列表，按值捕获所有变量，按引用捕获<code>filesCopied</code>。</li><li><code>&#123;...&#125;</code>: 异步任务的内容，使用lambda表达式定义。</li></ul></li><li><code>try &#123;...&#125; catch (const std::exception &amp;e) &#123;...&#125;</code> 异常处理<ul><li><code>try &#123;...&#125;</code> 尝试复制文件，覆盖已存在的文件。</li><li><code>catch (const std::exception &amp;e) &#123;...&#125;</code> 捕获异常<ul><li><code>std::lock_guard&lt;std::mutex&gt; lock(errorMutex);</code> 创建互斥锁，保证在多线程环境下安全地访问共享资源。</li></ul></li></ul></li><li><code>fs::copy_file(entry, target, fs::copy_options::overwrite_existing);</code> 复制单个文件，覆盖已存在的文件。<ul><li><code>fs::copy_file()</code>: 复制文件函数</li><li><code>entry</code>: 源路径</li><li><code>target</code>: 目标路径</li><li><code>fs::copy_options::overwrite_existing</code>: 覆盖已存在的文件</li></ul></li><li><code>filesCopied++;</code> 原子递增文件计数器。</li></ul></li><li><p><code> std::cout &lt;&lt; &quot;开始复制，总任务数: &quot; &lt;&lt; futures.size() &lt;&lt; &quot;\n&quot;;</code></p><ul><li><code>futures.size()</code>: 异步任务的数量</li></ul></li><li><h4 id="等待异步任务完成并且更新进度"><a href="#等待异步任务完成并且更新进度" class="headerlink" title="等待异步任务完成并且更新进度"></a>等待异步任务完成并且更新进度</h4>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    <span class="hljs-comment">// 等待所有异步任务完成，并显示进度</span><br><span class="hljs-keyword">while</span> (filesCopied + directoriesCopied &lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(futures.<span class="hljs-built_in">size</span>()))<br>&#123;<br>    <span class="hljs-built_in">showProgress</span>();<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">200</span>)); <span class="hljs-comment">// 每200ms更新一次</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>while (filesCopied + directoriesCopied &lt; static_cast&lt;int&gt;(futures.size()))</code> 当文件和目录复制完成数量小于异步任务数量时，继续循环。<ul><li>&#96;&#96;&#96;filesCopied + directoriesCopied&#96;: 文件和目录复制完成数量。</li><li><code>static_cast&lt;int&gt;()</code>: 将异步任务数量显式转换为整数。<ul><li><h5 id="ps-显式转换是一种由程序员手动进行的类型转换，它告诉编译器将一个类型的值转换为另一个类型。与隐式转换不同，显式转换需要程序员明确指定转换的类型，因此也被称为“显式类型转换”或“强制类型转换”。"><a href="#ps-显式转换是一种由程序员手动进行的类型转换，它告诉编译器将一个类型的值转换为另一个类型。与隐式转换不同，显式转换需要程序员明确指定转换的类型，因此也被称为“显式类型转换”或“强制类型转换”。" class="headerlink" title="ps.显式转换是一种由程序员手动进行的类型转换，它告诉编译器将一个类型的值转换为另一个类型。与隐式转换不同，显式转换需要程序员明确指定转换的类型，因此也被称为“显式类型转换”或“强制类型转换”。"></a>ps.显式转换是一种由程序员手动进行的类型转换，它告诉编译器将一个类型的值转换为另一个类型。与隐式转换不同，显式转换需要程序员明确指定转换的类型，因此也被称为“显式类型转换”或“强制类型转换”。</h5></li></ul></li><li><code>futures.size()</code>: 异步任务数量。</li></ul></li><li><code>showProgress();</code> 更新进度</li><li><code>std::this_thread::sleep_for(std::chrono::milliseconds(200));</code> 每隔200毫秒更新一次进度。</li></ul></li><li><h4 id="等待所有任务完成"><a href="#等待所有任务完成" class="headerlink" title="等待所有任务完成"></a>等待所有任务完成</h4>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;f : futures)<br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        f.<span class="hljs-built_in">get</span>(); <span class="hljs-comment">// 获取异步结果（可能重新抛出异常）</span><br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>    &#123;<br>        <span class="hljs-comment">// 此处异常已在任务内处理过，此处仅确保不会终止程序</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>for (auto &amp;f : futures)</code> 遍历所有异步任务</p><ul><li><code>futures</code>: 异步任务向量</li></ul></li><li><p><code>f.get();</code> 获取异步任务的结果，可能重新抛出异常。</p></li><li><p><code>catch (const std::exception &amp;e)</code> 捕获异常</p><ul><li><code>catch (const std::exception &amp;e) &#123;...&#125;</code> 捕获异常</li></ul></li><li><p><code>auto endTime = std::chrono::steady_clock::now();</code></p><ul><li><code>std::chrono::steady_clock::now()</code>: 获取当前时间点。</li></ul></li><li><p><code>auto duration = std::chrono::duration_cast&lt;std::chrono::seconds&gt;(endTime - startTime);</code></p><ul><li><code>std::chrono::duration_cast&lt;std::chrono::seconds&gt;(endTime - startTime)</code>: 计算时间间隔，将时间间隔转换为秒。<ul><li><code>chrono::duration_cast&lt;&gt;</code>: 时间间隔转换函数</li><li><code>std::chrono::seconds</code>: 时间间隔类型，表示秒。</li><li><code>endTime - startTime</code>: 时间间隔，表示从开始时间到结束时间的间隔。</li></ul></li></ul></li></ul></li></ul></li><li><h3 id="void-createFile-const-fs-path-path-const-std-string-content-函数"><a href="#void-createFile-const-fs-path-path-const-std-string-content-函数" class="headerlink" title="void createFile(const fs::path &amp;path, const std::string &amp;content)函数"></a><code>void createFile(const fs::path &amp;path, const std::string &amp;content)</code>函数</h3><ul><li>该函数用于创建一个文件，并将指定的内容写入该文件。</li><li><code>const fs::path &amp;path</code>: 源路径</li><li><code>const std::string &amp;content</code>: 文件内容</li><li>该函数实现如下：  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ofstream <span class="hljs-title">file</span><span class="hljs-params">(path)</span></span>;<br><span class="hljs-keyword">if</span> (!file)<br>&#123;<br>    cerr &lt;&lt; <span class="hljs-string">&quot;Error: 无法在 &quot;</span> &lt;&lt; path &lt;&lt; <span class="hljs-string">&quot;下创建文件&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>file &lt;&lt; content;<br></code></pre></td></tr></table></figure></li><li><code>ofstream file(path)</code>: 创建一个输出文件流，用于写入文件。使用<code>std::ofstream</code> 在离开作用域时自动调用析构函数关闭文件。</li></ul></li><li><h3 id="void-createCMakeLists-const-fs-path-parent-path-const-string-projectName-函数"><a href="#void-createCMakeLists-const-fs-path-parent-path-const-string-projectName-函数" class="headerlink" title="void createCMakeLists(const fs::path &amp;parent_path, const string &amp;projectName)函数"></a><code>void createCMakeLists(const fs::path &amp;parent_path, const string &amp;projectName)</code>函数</h3><ul><li><p>该函数用于在指定的父目录下创建一个CMakeLists.txt文件，并写入指定的项目名称。</p></li><li><p><code>const fs::path &amp;parent_path</code>: 父目录路径</p></li><li><p><code>const string &amp;projectName</code>: 项目名称</p></li><li><p>该函数实现如下：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-type">const</span> string cmakeTemplate =<br><span class="hljs-string">R&quot;(project()&quot;</span> + projectName + <span class="hljs-string">R&quot;()</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 添加包含目录</span><br><span class="hljs-string">include_directories(</span><br><span class="hljs-string">    $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include</span><br><span class="hljs-string">)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 收集所有源文件</span><br><span class="hljs-string">file(GLOB SOURCES &quot;src/*.cpp&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 创建可执行文件</span><br><span class="hljs-string">add_executable($&#123;PROJECT_NAME&#125; $&#123;SOURCES&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 设置目标属性</span><br><span class="hljs-string">set_target_properties($&#123;PROJECT_NAME&#125; PROPERTIES</span><br><span class="hljs-string">    OUTPUT_NAME &quot;$&#123;PROJECT_NAME&#125;&quot;</span><br><span class="hljs-string">    RUNTIME_OUTPUT_DIRECTORY &quot;$&#123;CMAKE_BINARY_DIR&#125;/$&#123;PROJECT_NAME&#125;&quot;</span><br><span class="hljs-string">)</span><br><span class="hljs-string">)&quot;</span>;<br>    <span class="hljs-built_in">createFile</span>(parent_path / <span class="hljs-string">&quot;CMakeLists.txt&quot;</span>, cmakeTemplate);<br></code></pre></td></tr></table></figure></li><li><p><code>const string cmakeTemplate</code>: CMakeLists.txt文件内容模板</p></li><li><p><code>R&quot;(project()&quot; + projectName + R&quot;())</code>: 使用原始字符串字面值，将项目名称插入到模板中。</p></li><li><p><code>createFile(parent_path / &quot;CMakeLists.txt&quot;, cmakeTemplate)</code>: 调用<code>createFile()</code>函数，在父目录下创建CMakeLists.txt文件，并将模板内容写入该文件。</p></li></ul></li><li><h3 id="void-createReadme-const-fs-path-parent-path-const-string-projectName-函数"><a href="#void-createReadme-const-fs-path-parent-path-const-string-projectName-函数" class="headerlink" title="void createReadme(const fs::path &amp;parent_path, const string &amp;projectName)函数"></a><code>void createReadme(const fs::path &amp;parent_path, const string &amp;projectName)</code>函数</h3><ul><li>该函数用于在指定的父目录下创建一个README.md文件，并写入指定的项目名称。</li><li><code>const fs::path &amp;parent_path</code>: 父目录路径</li><li><code>const string &amp;projectName</code>: 项目名称</li><li>该函数实现如下：  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    <span class="hljs-type">const</span> std::string content =<br><span class="hljs-string">R&quot;(# )&quot;</span> + projectName + <span class="hljs-string">R&quot;(</span><br><span class="hljs-string"></span><br><span class="hljs-string">## 简介</span><br><span class="hljs-string"></span><br><span class="hljs-string">## 需求</span><br><span class="hljs-string"></span><br><span class="hljs-string">## 练习</span><br><span class="hljs-string">)&quot;</span>;<br><br>    <span class="hljs-built_in">createFile</span>(parent_path / <span class="hljs-string">&quot;readme.md&quot;</span>, content);<br></code></pre></td></tr></table></figure></li><li><code>const std::string content</code>: README.md文件内容</li><li><code>R&quot;(# )&quot; + projectName + R&quot;(...)</code>: 使用原始字符串字面值，将项目名称插入到模板中。</li><li><code>createFile(parent_path / &quot;readme.md&quot;, content)</code>: 调用<code>createFile()</code>函数，在父目录下创建README.md文件，并将模板内容写入该文件。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cmake学习(1)</title>
    <link href="/2025/07/22/cmake%E5%AD%A6%E4%B9%A0-1/"/>
    <url>/2025/07/22/cmake%E5%AD%A6%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h1 id="cmake学习-1"><a href="#cmake学习-1" class="headerlink" title="cmake学习(1)"></a>cmake学习(1)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这里记录cmake的<code>CMakeLists.txt</code>编写的一些笔记，用于学习与记录，主要参考<a href="https://cmake.org/cmake/help/latest/index.html">cmake官方文档</a>。</p><h2 id="例程与解析"><a href="#例程与解析" class="headerlink" title="例程与解析"></a>例程与解析</h2><h3 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h3><p>这里我们以之前的的<code>000-CreateNewProject</code>(创建新项目工具)的<code>CMakeLists.txt</code>为例，进行解析。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 设置最低 CMake 版本要求</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><br><span class="hljs-comment"># 创建排序算法项目</span><br><span class="hljs-keyword">project</span>(<span class="hljs-number">000</span>-CreateNewProject)<br><br><span class="hljs-comment"># 复制模板文件</span><br><span class="hljs-comment"># add_custom_target(CopyTemplate ALL</span><br><span class="hljs-comment">#     COMMAND $&#123;CMAKE_COMMAND&#125; -E copy_directory</span><br><span class="hljs-comment">#         $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/template</span><br><span class="hljs-comment">#         $&#123;CMAKE_CURRENT_BINARY_DIR&#125;/template</span><br><span class="hljs-comment">#     COMMENT &quot;Copying template files...&quot;</span><br><span class="hljs-comment"># )</span><br><br><span class="hljs-comment"># 设置C++标准</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-comment"># 设置exe输出格式为GBK 解决中文乱码问题</span><br><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -Wall -fexec-charset=GBK&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -Wall -fexec-charset=GBK&quot;</span>)<br><br><span class="hljs-comment"># 设置构建类型（Debug/Release）</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> CMAKE_BUILD_TYPE)<br>    <span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Debug)<br>    <span class="hljs-comment"># set(CMAKE_BUILD_TYPE Release)</span><br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># 添加包含目录</span><br><span class="hljs-keyword">include_directories</span>(<br>    <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>)<br><br><span class="hljs-comment"># 收集所有源文件</span><br><span class="hljs-keyword">file</span>(GLOB SOURCES <span class="hljs-string">&quot;src/*.cpp&quot;</span>)<br><br><span class="hljs-comment"># 创建可执行文件</span><br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br><br><span class="hljs-comment"># 使可执行文件依赖复制操作</span><br><span class="hljs-comment"># add_dependencies($&#123;PROJECT_NAME&#125; CopyTemplate)</span><br><br><span class="hljs-comment"># 设置目标属性</span><br><span class="hljs-keyword">set_target_properties</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES<br>    OUTPUT_NAME <span class="hljs-string">&quot;$&#123;PROJECT_NAME&#125;&quot;</span><br>    RUNTIME_OUTPUT_DIRECTORY <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/$&#123;PROJECT_NAME&#125;&quot;</span><br>)<br><br><span class="hljs-comment"># 设置输出目录</span><br><span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/bin)<br><span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br><span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br></code></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="1-设置最低-CMake-版本要求"><a href="#1-设置最低-CMake-版本要求" class="headerlink" title="1. 设置最低 CMake 版本要求"></a>1. 设置最低 CMake 版本要求</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br></code></pre></td></tr></table></figure><ul><li><code>cmake_minimum_required</code>用于设置最低的CMake版本要求，这里设置为3.10。</li></ul><h4 id="2-创建排序算法项目"><a href="#2-创建排序算法项目" class="headerlink" title="2. 创建排序算法项目"></a>2. 创建排序算法项目</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">project</span>(<span class="hljs-number">000</span>-CreateNewProject)<br></code></pre></td></tr></table></figure><ul><li><code>project</code>用于创建一个项目，这里创建了一个名为<code>000-CreateNewProject</code>的项目。</li></ul><h4 id="3-复制模板文件"><a href="#3-复制模板文件" class="headerlink" title="3. 复制模板文件"></a>3. 复制模板文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_custom_target</span>(CopyTemplate ALL<br>    <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy_directory<br>        <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/template<br>        <span class="hljs-variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/template<br>    COMMENT <span class="hljs-string">&quot;Copying template files...&quot;</span><br>)<br></code></pre></td></tr></table></figure><ul><li><code>add_custom_target</code>用于添加一个自定义目标，这里添加了一个名为<code>CopyTemplate</code>的自定义目标，用于复制模板文件。</li><li><code>COMMAND</code>用于指定要执行的命令，这里指定了要执行的命令为:<ul><li><code>$&#123;CMAKE_COMMAND&#125; -E copy_directory </code> :复制目录命令</li><li><code>$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/template</code> : 源目录，即<code>$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/template</code>目录下的所有文件<ul><li><code>CMAKE_CURRENT_SOURCE_DIR</code>:表示当前CMakeLists.txt所在的目录。</li></ul></li><li><code>$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/template</code>: 目标目录，即<code>$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/template</code>目录下的所有文件<ul><li><code>CMAKE_CURRENT_BINARY_DIR</code>表示当前构建目录。</li></ul></li></ul></li><li><code>COMMENT</code>用于指定要显示的注释，这里指定了要显示的注释为<code>Copying template files...</code>。</li></ul><h4 id="4-设置C-标准"><a href="#4-设置C-标准" class="headerlink" title="4. 设置C++标准"></a>4. 设置C++标准</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br></code></pre></td></tr></table></figure><ul><li><code>set</code>用于设置变量，这里设置了两个变量:<ul><li><code>CMAKE_CXX_STANDARD</code>用于设置C++标准，这里设置为17。</li><li><code>CMAKE_CXX_STANDARD_REQUIRED</code>用于设置是否需要C++标准，这里设置为ON。</li></ul></li></ul><h4 id="5-设置exe输出格式为GBK-解决中文乱码问题"><a href="#5-设置exe输出格式为GBK-解决中文乱码问题" class="headerlink" title="5. 设置exe输出格式为GBK 解决中文乱码问题"></a>5. 设置exe输出格式为GBK 解决中文乱码问题</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_C_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; -Wall -fexec-charset=GBK&quot;</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -Wall -fexec-charset=GBK&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>set</code>用于设置变量，这里设置了两个变量:<ul><li><code>CMAKE_C_FLAGS</code>用于设置C编译选项，这里设置了<code>-Wall</code>和<code>-fexec-charset=GBK</code>。</li><li><code>CMAKE_CXX_FLAGS</code>用于设置C++编译选项，这里设置了<code>-Wall</code>和<code>-fexec-charset=GBK</code>。</li><li><code>-Wall</code>用于显示所有警告信息。</li><li><code>-fexec-charset=GBK</code>用于设置输出格式为GBK。</li></ul></li></ul><h4 id="6-设置构建类型（Debug-Release）"><a href="#6-设置构建类型（Debug-Release）" class="headerlink" title="6. 设置构建类型（Debug&#x2F;Release）"></a>6. 设置构建类型（Debug&#x2F;Release）</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> CMAKE_BUILD_TYPE)<br>    <span class="hljs-keyword">set</span>(CMAKE_BUILD_TYPE Debug)<br>    <span class="hljs-comment"># set(CMAKE_BUILD_TYPE Release)</span><br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><ul><li><code>if</code>用于判断条件，这里判断了<code>CMAKE_BUILD_TYPE</code>是否为空，如果为空，则设置<code>CMAKE_BUILD_TYPE</code>为Debug，否则不设置。<ul><li><code>CMAKE_BUILD_TYPE</code>用于设置构建类型，这里设置为Debug。</li></ul></li></ul><h4 id="7-添加包含目录"><a href="#7-添加包含目录" class="headerlink" title="7. 添加包含目录"></a>7. 添加包含目录</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include_directories</span>(<br>    <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span><br>)<br></code></pre></td></tr></table></figure><ul><li><code>include_directories</code>用于添加包含目录，这里添加了<code>$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include</code>目录。<ul><li><code>CMAKE_CURRENT_SOURCE_DIR</code>表示当前CMakeLists.txt所在的目录。</li></ul></li></ul><h4 id="8-收集所有源文件"><a href="#8-收集所有源文件" class="headerlink" title="8. 收集所有源文件"></a>8. 收集所有源文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">file</span>(GLOB SOURCES <span class="hljs-string">&quot;src/*.cpp&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>file</code>用于执行文件操作，这里使用了<code>GLOB</code>命令，用于收集所有源文件，这里收集了<code>src</code>目录下的所有<code>.cpp</code>文件，并将结果保存在<code>SOURCES</code>变量中。<ul><li><code>GLOB</code>命令用于收集文件，这里收集了<code>src</code>目录下的所有<code>.cpp</code>文件。</li><li><code>SOURCES</code>变量用于保存收集到的文件列表。</li></ul></li></ul><h4 id="9-创建可执行文件"><a href="#9-创建可执行文件" class="headerlink" title="9. 创建可执行文件"></a>9. 创建可执行文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> <span class="hljs-variable">$&#123;SOURCES&#125;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>add_executable</code>用于创建可执行文件，这里创建了一个名为<code>$&#123;PROJECT_NAME&#125;</code>的可执行文件，并将<code>$&#123;SOURCES&#125;</code>变量中的所有源文件添加到可执行文件中。<ul><li><code>$&#123;PROJECT_NAME&#125;</code>表示当前项目名。</li><li><code>$&#123;SOURCES&#125;</code>表示所有源文件。</li></ul></li></ul><h4 id="10-使可执行文件依赖复制操作-保证程序运行前文件已复制"><a href="#10-使可执行文件依赖复制操作-保证程序运行前文件已复制" class="headerlink" title="10. 使可执行文件依赖复制操作,保证程序运行前文件已复制"></a>10. 使可执行文件依赖复制操作,保证程序运行前文件已复制</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_dependencies</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> CopyTemplate)<br></code></pre></td></tr></table></figure><ul><li><code>add_dependencies</code>用于添加依赖关系，这里将<code>CopyTemplate</code>添加为<code>$&#123;PROJECT_NAME&#125;</code>的依赖关系，即<code>$&#123;PROJECT_NAME&#125;</code>依赖于<code>CopyTemplate</code>。<ul><li><code>CopyTemplate</code>表示自定义目标，即复制模板文件的目标。</li><li><code>$&#123;PROJECT_NAME&#125;</code>表示当前项目名。</li></ul></li></ul><h4 id="11-设置目标属性"><a href="#11-设置目标属性" class="headerlink" title="11. 设置目标属性"></a>11. 设置目标属性</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set_target_properties</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> PROPERTIES<br>    OUTPUT_NAME <span class="hljs-string">&quot;$&#123;PROJECT_NAME&#125;&quot;</span><br>    RUNTIME_OUTPUT_DIRECTORY <span class="hljs-string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/$&#123;PROJECT_NAME&#125;&quot;</span><br>)<br></code></pre></td></tr></table></figure><ul><li><code>set_target_properties</code>用于设置目标属性，这里设置了两个属性:<ul><li><code>OUTPUT_NAME</code>用于设置输出文件名，这里设置为<code>$&#123;PROJECT_NAME&#125;</code>。</li><li><code>RUNTIME_OUTPUT_DIRECTORY</code>用于设置输出目录，这里设置为<code>$&#123;CMAKE_BINARY_DIR&#125;/$&#123;PROJECT_NAME&#125;</code>。</li><li><code>PROPERTIES</code>用于指定要设置的属性。</li><li><code>$&#123;PROJECT_NAME&#125;</code>表示当前项目名。</li><li><code>$&#123;CMAKE_BINARY_DIR&#125;</code>表示当前构建目录。</li></ul></li></ul><h4 id="12-设置输出目录"><a href="#12-设置输出目录" class="headerlink" title="12. 设置输出目录"></a>12. 设置输出目录</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/bin)<br><span class="hljs-keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br><span class="hljs-keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="hljs-variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib)<br></code></pre></td></tr></table></figure><ul><li><code>set</code>用于设置变量，这里设置了三个变量:<ul><li><code>CMAKE_RUNTIME_OUTPUT_DIRECTORY</code>用于设置可执行文件的输出目录，这里设置为<code>$&#123;CMAKE_BINARY_DIR&#125;/bin</code>。</li><li><code>CMAKE_ARCHIVE_OUTPUT_DIRECTORY</code>用于设置静态库的输出目录，这里设置为<code>$&#123;CMAKE_BINARY_DIR&#125;/lib</code>。</li><li><code>CMAKE_LIBRARY_OUTPUT_DIRECTORY</code>用于设置动态库的输出目录，这里设置为<code>$&#123;CMAKE_BINARY_DIR&#125;/lib</code>。</li><li><code>CMAKE_BINARY_DIR</code>表示当前构建目录。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>cmake_minimum_required</code>用于设置最低的CMake版本要求。</li><li><code>project</code>用于创建一个项目。</li><li><code>add_custom_target</code>用于添加一个自定义目标。</li><li><code>set</code>用于设置变量。</li><li><code>include_directories</code>用于添加包含目录。</li><li><code>file</code>用于执行文件操作。</li><li><code>add_executable</code>用于创建可执行文件。</li><li><code>add_dependencies</code>用于添加依赖关系。</li><li><code>set_target_properties</code>用于设置目标属性。</li><li><code>set</code>用于设置输出目录。</li><li><code>CMAKE_CURRENT_SOURCE_DIR</code>表示当前CMakeLists.txt所在的目录。</li><li><code>CMAKE_CURRENT_BINARY_DIR</code>表示当前构建目录。</li><li><code>CMAKE_BINARY_DIR</code>表示当前构建目录。</li><li><code>$&#123;PROJECT_NAME&#125;</code>表示当前项目名。</li><li><code>$&#123;SOURCES&#125;</code>表示所有源文件。</li><li><code>$&#123;CMAKE_COMMAND&#125; -E copy_directory</code>用于复制目录命令。</li><li><code>-Wall</code>用于显示所有警告信息。</li><li><code>-fexec-charset=GBK</code>用于设置输出格式为GBK。</li><li><code>CMAKE_BUILD_TYPE</code>用于设置构建类型。</li><li><code>CMAKE_RUNTIME_OUTPUT_DIRECTORY</code>用于设置可执行文件的输出目录。</li><li><code>CMAKE_ARCHIVE_OUTPUT_DIRECTORY</code>用于设置静态库的输出目录。</li><li><code>CMAKE_LIBRARY_OUTPUT_DIRECTORY</code>用于设置动态库的输出目录。</li><li><code>OUTPUT_NAME</code>用于设置输出文件名。</li><li><code>RUNTIME_OUTPUT_DIRECTORY</code>用于设置输出目录。</li><li><code>COMMAND</code>用于指定要执行的命令。</li><li><code>COMMENT</code>用于指定要显示的注释。</li><li><code>CMAKE_CXX_STANDARD</code>用于设置C++标准。</li><li><code>CMAKE_CXX_STANDARD_REQUIRED</code>用于设置是否需要C++标准。</li><li><code>GLOB</code>用于收集所有源文件。</li><li><code>CMAKE_C_FLAGS</code>用于设置C编译选项。</li><li><code>CMAKE_CXX_FLAGS</code>用于设置C++编译选项。</li><li><code>Debug</code>表示调试模式。</li><li><code>Release</code>表示发布模式。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能散热小桌板</title>
    <link href="/2025/05/05/IRSTB/"/>
    <url>/2025/05/05/IRSTB/</url>
    
    <content type="html"><![CDATA[<h1 id="智能散热小桌板"><a href="#智能散热小桌板" class="headerlink" title="智能散热小桌板"></a>智能散热小桌板</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p><del>智能散热小桌板是一款基于CW32L010芯片开发的智能散热小桌板。它集成了蓝牙、风扇、LED灯功能，可以实时监测桌面的温湿度，并根据温度自动调节风扇转速，为用户提供舒适的使用环境。</del><br>简单来说就是能根据电脑温度自动调节风扇转速的散热小桌板。</p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li>实时监测电脑的温度</li><li>根据温度自动调节风扇转速</li><li>使用蓝牙连接</li></ul><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><ul><li>主控芯片：CW32L010</li><li>蓝牙模块：DX-BT24-T</li><li>风扇：12V直流风扇(利民的12025风扇)</li></ul><h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><h2 id="设计图展示"><a href="#设计图展示" class="headerlink" title="设计图展示"></a>设计图展示</h2><hr><h2 id="TCV3更新日志"><a href="#TCV3更新日志" class="headerlink" title="TCV3更新日志"></a>TCV3更新日志</h2><h3 id="V3-3-2-3"><a href="#V3-3-2-3" class="headerlink" title="V3.3.2.3"></a>V3.3.2.3</h3><ul><li>修复了UI图标显示错误的问题。</li></ul><hr><h3 id="V3-3-2-2"><a href="#V3-3-2-2" class="headerlink" title="V3.3.2.2"></a>V3.3.2.2</h3><ul><li>重新调整了UI界面。</li><li>优化了设备检测逻辑。</li><li>修复了一些已知的BUG。</li></ul><hr><h3 id="V3-3-2-1"><a href="#V3-3-2-1" class="headerlink" title="V3.3.2.1"></a>V3.3.2.1</h3><ul><li>添加了更新日志页面。</li></ul><hr><h3 id="V3-3-2-0"><a href="#V3-3-2-0" class="headerlink" title="V3.3.2.0"></a>V3.3.2.0</h3><ul><li>优化温度检测和风扇控制逻辑。</li></ul><hr><h3 id="V3-3-1-0"><a href="#V3-3-1-0" class="headerlink" title="V3.3.1.0"></a>V3.3.1.0</h3><ul><li>添加了安装程序，方便部署。</li></ul><hr><h3 id="V3-3-0-0"><a href="#V3-3-0-0" class="headerlink" title="V3.3.0.0"></a>V3.3.0.0</h3><ul><li>重构了BLE蓝牙库，实现轻量化运行。</li></ul><hr><h3 id="V3-2-0-0"><a href="#V3-2-0-0" class="headerlink" title="V3.2.0.0"></a>V3.2.0.0</h3><ul><li>添加了AMD驱动兼容AMD CPU设备。</li></ul><hr><h3 id="V3-1-0-0"><a href="#V3-1-0-0" class="headerlink" title="V3.1.0.0"></a>V3.1.0.0</h3><ul><li>移除了LibreHardwareMonitor</li><li>添加了CPU类型识别逻辑，更好的针对不同的CPU进行温度检测。</li><li>添加了WinRing0用于获取IntelCPU温度。</li></ul><hr><h3 id="V3-0-0-0"><a href="#V3-0-0-0" class="headerlink" title="V3.0.0.0"></a>V3.0.0.0</h3><ul><li>再次重构项目，更新项目框架为QT6框架。</li></ul><hr><h3 id="V2-0-0-0"><a href="#V2-0-0-0" class="headerlink" title="V2.0.0.0"></a>V2.0.0.0</h3><ul><li>添加UI界面使用C#语言重构了整个项目，添加开源的LibreHardwareMonitor用于更好的监测CPU与GPU温度。</li></ul><hr><h3 id="V1-0-0-0"><a href="#V1-0-0-0" class="headerlink" title="V1.0.0.0"></a>V1.0.0.0</h3><ul><li>使用命令行完成基础控制。</li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
      <category>CW32L010</category>
      
      <category>智能散热小桌板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CW32L010</tag>
      
      <tag>蓝牙</tag>
      
      <tag>散热小桌板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CW32L010适配GNU启动文件解析</title>
    <link href="/2025/05/01/CW32L010%E9%80%82%E9%85%8DGNU%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <url>/2025/05/01/CW32L010%E9%80%82%E9%85%8DGNU%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="CW32L010适配GNU启动文件解析"><a href="#CW32L010适配GNU启动文件解析" class="headerlink" title="CW32L010适配GNU启动文件解析"></a>CW32L010适配GNU启动文件解析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为keil开发单片机实在是手感不太好，所以打算使用GNU工具链进行开发，因此找到了VSCode上的EIDE插件，但是GNU工具链的启动文件和keil的启动文件还是有一些区别的，所以打算记录一下GNU启动文件的结构，方便以后查阅。</p><p>ps：本文基于CW32L010的GNU启动文件进行解析,主要放在启动文件（.s文件）的解析。由于我也是新手一个，文章中可能存在错误，欢迎指正。</p><h2 id="GNU启动文件的结构"><a href="#GNU启动文件的结构" class="headerlink" title="GNU启动文件的结构"></a>GNU启动文件的结构</h2><h3 id="首先需要定义汇编语法，定义处理器，浮点运算，指令集。"><a href="#首先需要定义汇编语法，定义处理器，浮点运算，指令集。" class="headerlink" title="首先需要定义汇编语法，定义处理器，浮点运算，指令集。"></a>首先需要定义汇编语法，定义处理器，浮点运算，指令集。</h3><p>因为CW32l010是M0+内核，所以使用的是Cortex-M0+处理器，软件浮点运算(M0+无硬件FPU)，Thumb指令集。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">.syntax unified <span class="hljs-comment">// 启用统一的ARM/Thumb汇编语法。</span><br>.cpu cortex-m0plus <span class="hljs-comment">// 使用Cortex-M0+处理器</span><br>.fpu softvfp <span class="hljs-comment">// 使用软件浮点运算，M0+无硬件FPU</span><br>.thumb <span class="hljs-comment">// 使用Thumb指令集</span><br></code></pre></td></tr></table></figure><h3 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h3><ol><li>定义一个全局符号g_pfnVectors之后用来存储中断向量表。</li><li>定义一个全局函数Default_Handler，用来处理中断向量表中的异常（防止程序跑飞）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">.global g_pfnVectors <span class="hljs-comment">// 声明全局变量g_pfnVectors</span><br>.global Default_Handler <span class="hljs-comment">// 声明全局函数Default_Handler</span><br></code></pre></td></tr></table></figure><h3 id="定义几个重要的地址"><a href="#定义几个重要的地址" class="headerlink" title="定义几个重要的地址"></a>定义几个重要的地址</h3><h4 id="在开始这段内容讲解前，我们需要先明白几个知识点"><a href="#在开始这段内容讲解前，我们需要先明白几个知识点" class="headerlink" title="在开始这段内容讲解前，我们需要先明白几个知识点"></a>在开始这段内容讲解前，我们需要先明白几个知识点</h4><p>我们所编写的代码在上电之前都是存储在Flash中的，上电之后，代码会被加载到RAM中，所以我们需要定义一些地址，来表示Flash和RAM中的地址，完成初始化。</p><ol><li>.data data段存放着已经初始化过且不为0的全局变量和静态变量，一开始放在Flash中，上电之后，会被加载到RAM中。</li><li>.bss BSS段存放着未初始化的或者初始化为0的全局变量和静态变量，一开始放在Flash中，上电之后，会被加载到RAM中。</li><li>_sidata 定义的是在FLash中data段的起始<strong>地址</strong></li><li>_sdata 定义的是在RAM中data段的起始<strong>地址</strong></li><li>_edata 定义的是在RAM中data段的结束<strong>地址</strong></li><li>_sbss 定义的是在RAM中bss段的起始<strong>地址</strong></li><li>_ebss 定义的是在RAM中bss段的结束<strong>地址</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* start address for the initialization values of the .data section.</span><br><span class="hljs-comment">defined in linker script */</span><br><br>```c<br><span class="hljs-comment">/* start address for the initialization values of the .data section.</span><br><span class="hljs-comment">defined in linker script */</span><br><span class="hljs-comment">/* .data data段 Flash中初始化数据的起始地址 */</span><br>.word _sidata<br><br><span class="hljs-comment">/* start address for the .data section. defined in linker script */</span><br><span class="hljs-comment">/* .data data段 RAM中数据段的起始地址 */</span><br>.word _sdata<br><br><span class="hljs-comment">/* end address for the .data section. defined in linker script */</span><br><span class="hljs-comment">/* .data data段 RAM中数据段的结束地址 */</span><br>.word _edata<br><br><span class="hljs-comment">/* start address for the .bss section. defined in linker script */</span><br><span class="hljs-comment">/* .bss BSS段（未初始化全局变量）的起始地址 */</span><br>.word _sbss<br><br><span class="hljs-comment">/* end address for the .bss section. defined in linker script */</span><br><span class="hljs-comment">/* .bss BSS段（未初始化全局变量）的结束地址 */</span><br>.word _ebss<br></code></pre></td></tr></table></figure><h3 id="定义Reset-Handler函数"><a href="#定义Reset-Handler函数" class="headerlink" title="定义Reset_Handler函数"></a>定义Reset_Handler函数</h3><p>定义一个Reset_Handler函数，用于初始化RAM和系统调用main函数。</p><ol><li>定义一个名为 .text.Reset_Handler 的代码段（Section），专门存放 Reset_Handler 函数的代码。</li><li>将 Reset_Handler 声明为 弱符号（Weak Symbol）。</li><li>将 Reset_Handler 声明为 函数类型（Function Type）。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*定义一个名为 .text.Reset_Handler 的代码段（Section），专门存放 Reset_Handler 函数的代码 */</span><br>.section .text.Reset_Handler<br><br><span class="hljs-comment">/*将 Reset_Handler 声明为 弱符号（Weak Symbol） */</span><br>.weak Reset_Handler<br><br><span class="hljs-comment">/*将 Reset_Handler 声明为 函数类型（Function Type） */</span><br><span class="hljs-comment">/*%function：表示符号是函数类型 */</span><br>.type Reset_Handler, %function<br></code></pre></td></tr></table></figure><h3 id="定义Reset-Handler函数的内容"><a href="#定义Reset-Handler函数的内容" class="headerlink" title="定义Reset_Handler函数的内容"></a>定义Reset_Handler函数的内容</h3><ol><li>设置栈指针，将栈指针指向_estack，也就是栈顶地址。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Reset_Handler:<br>  ldr   r0, =_estack    <span class="hljs-comment">/* 获取栈顶地址 */</span><br>  mov   sp, r0          <span class="hljs-comment">/* set stack pointer 设置栈指针 */</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将Flash中的初始化数据复制到RAM中，也就是将Flash中的data段复制到RAM中。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">  ldr r0, =_sdata       <span class="hljs-comment">// 加载_sdata的地址到r0寄存器（data段起始地址）</span><br>  ldr r1, =_edata       <span class="hljs-comment">// 加载_edata的地址到r1寄存器（data段终止地址）</span><br>  ldr r2, =_sidata      <span class="hljs-comment">// 加载_sidata的地址到r2寄存器（Flash中的初始化数据）</span><br>  movs r3, #<span class="hljs-number">0</span>           <span class="hljs-comment">// 将0移动到r3寄存器</span><br>  b LoopCopyDataInit    <span class="hljs-comment">// 跳转到LoopCopyDataInit标签</span><br><br>CopyDataInit:<br>  ldr r4, [r2, r3]      <span class="hljs-comment">// 从r2寄存器加上r3寄存器的值所指向的内存地址中，将数据加载到r4寄存器中（加载Flash中的初始化数据到r4）</span><br>  str r4, [r0, r3]      <span class="hljs-comment">// 将r4寄存器中的数据存储到r0寄存器加上r3寄存器的值所指向的内存地址中(将r4中的数据存储到RAM中)</span><br>  adds r3, r3, #<span class="hljs-number">4</span>       <span class="hljs-comment">// 将r3寄存器的值加上4，并将结果存储到r3寄存器中(移动到下一个地址继续复制)</span><br><br><br>LoopCopyDataInit:<br>  adds r4, r0, r3       <span class="hljs-comment">// 将RAM数据段起始地址与r3寄存器的值相加，并将结果存储到r4寄存器中(将r4的数据替换为data段下一位地址)</span><br>  cmp r4, r1            <span class="hljs-comment">// 对比r4寄存器与RAM数据段结束地址（查看当前是否到达了RAM 数据段的结束地址）</span><br>  bcc CopyDataInit      <span class="hljs-comment">// 如果r4寄存器的值小于r1寄存器的值（未到达RAM的数据段结束地址），则跳转到CopyDataInit标签</span><br></code></pre></td></tr></table></figure><ol start="3"><li>将BSS段清零，也就是将RAM中的bss段清零。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Zero fill the bss segment. */</span><br><span class="hljs-comment">/*零填充bss区段。*/</span><br>  ldr r2, =_sbss        <span class="hljs-comment">// 将_sbss的地址加载到r2寄存器中（bss段起始地址）</span><br>  ldr r4, =_ebss        <span class="hljs-comment">// 将_ebss的地址加载到r4寄存器中（bss段终止地址）</span><br>  movs r3, #<span class="hljs-number">0</span>           <span class="hljs-comment">// 将0移动到r3寄存器中（bss段的填充数值）</span><br>  b LoopFillZerobss     <span class="hljs-comment">// 跳转到LoopFillZerobss标签处</span><br><br>FillZerobss:<br>  str  r3, [r2]         <span class="hljs-comment">// 将r3寄存器中的值存储到r2寄存器所指向的内存地址中（将r2地址指向的数值填充为0）</span><br>  adds r2, r2, #<span class="hljs-number">4</span>       <span class="hljs-comment">// 将r2寄存器的值加上4，并将结果存储到r2寄存器中（移动到下一个地址继续填充）</span><br><br>LoopFillZerobss:<br>  cmp r2, r4          <span class="hljs-comment">// 比较r2寄存器与_ebss的地址（如果到达结束地址的下一位地址则取消填充）</span><br>  bcc FillZerobss     <span class="hljs-comment">// 如果r2寄存器的值小于_ebss的地址（是否达到bss段的结束地址），则跳转到FillZerobss标签处</span><br></code></pre></td></tr></table></figure><ol start="4"><li>初始化系统时钟，初始化静态构造函数，调用main函数。最后进入死循环。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Call the clock system initialization function.*/</span><br><span class="hljs-comment">/*调用时钟系统初始化函数。*/</span><br>  bl  SystemInit<br><br><span class="hljs-comment">/* Call static constructors */</span><br><span class="hljs-comment">/*调用静态构造函数*/</span><br>  bl __libc_init_array<br><br><span class="hljs-comment">/* Call the application s entry point.*/</span><br><span class="hljs-comment">/*调用应用程序的入口点。*/</span><br>  bl main<br><br>LoopForever:<br>  b LoopForever<br></code></pre></td></tr></table></figure><ol start="5"><li>设置Reset_Handle的大小</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">/*设置Reset_Handle的大小，值为：当前位置-（减去）Reset_Handler的起始位置 */</span><br> <span class="hljs-comment">/*.表示当前地址 Reset_Handler 表示 Reset_Handler 的起始位置*/</span><br>.size Reset_Handler, .-Reset_Handler<br></code></pre></td></tr></table></figure><h3 id="到这里可以说是设置好了整个Reset-Handler函数，接下来我们还需要设置Default-Handler函数，用于处理中断向量表中的异常（防止程序跑飞）"><a href="#到这里可以说是设置好了整个Reset-Handler函数，接下来我们还需要设置Default-Handler函数，用于处理中断向量表中的异常（防止程序跑飞）" class="headerlink" title="到这里可以说是设置好了整个Reset_Handler函数，接下来我们还需要设置Default_Handler函数，用于处理中断向量表中的异常（防止程序跑飞）"></a>到这里可以说是设置好了整个Reset_Handler函数，接下来我们还需要设置Default_Handler函数，用于处理中断向量表中的异常（防止程序跑飞）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//*定义一个名为 .text.Default_Handler 的代码段（Section） */</span><br><span class="hljs-comment">/*.text段用于存储可执行代码 */</span><br><span class="hljs-comment">/*&quot;ax&quot;为段属性标志 a:表示该段需要分配内存，x:表示该段可执行 */</span><br><span class="hljs-comment">/*%progbits：段类型，表示该段包含实际数据（代码或初始化数据） */</span><br>  .section .text.Default_Handler,<span class="hljs-string">&quot;ax&quot;</span>,%progbits<br><br><span class="hljs-comment">/*Default_Handler：定义一个默认中断符号，出现未定义的中断触发时将跳转到这里 */</span><br>Default_Handler:<br><br><span class="hljs-comment">/*Infinite_Loop：定义一个循环符号， b Infinite_Loop：无条件跳转到Infinite_Loop实现死循环。 */</span><br><span class="hljs-comment">/*用途：当出现未被定义的中断时跳转至此进行死循环防止程序跑飞 */</span><br>Infinite_Loop:<br>  b Infinite_Loop<br><br><span class="hljs-comment">/*设置 Default_Handler 的大小，值为：当前位置-（减去）Default_Handler的起始位置 */</span><br><span class="hljs-comment">/*.表示当前地址 Default_Handler 表示 Default_Handler 的起始位置*/</span><br>  .size Default_Handler, .-Default_Handler<br></code></pre></td></tr></table></figure><h3 id="设置中断函数"><a href="#设置中断函数" class="headerlink" title="设置中断函数"></a>设置中断函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*定义一个名为 .isr_vector 的段（Section），专门用于存放中断向量表 */</span><br><span class="hljs-comment">/*&quot;a&quot;段属性标志 a:表示该段需要分配内存 */</span><br><span class="hljs-comment">/*%progbits：段类型，表示该段包含实际数据（中断服务函数的地址） */</span><br>.section .isr_vector,<span class="hljs-string">&quot;a&quot;</span>,%progbits<br><br><span class="hljs-comment">/*声明符号 g_pfnVectors 的类型为数据对象 */</span><br><span class="hljs-comment">/*%object：表示符号对应的是一个数据对象（如数组、结构体等） */</span><br><span class="hljs-comment">/*g_pfnVectors 是一个函数指针数组，每个元素指向一个中断服务函数 */</span><br>.type g_pfnVectors, %object<br><br><span class="hljs-comment">/*设置 g_pfnVectors 的大小为当前位置减去 g_pfnVectors 的起始位置 */</span><br><span class="hljs-comment">/*设置符号 g_pfnVectors 的大小为整个中断向量表的字节长度 */</span><br>.size g_pfnVectors, .-g_pfnVectors<br></code></pre></td></tr></table></figure><h3 id="设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片"><a href="#设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片" class="headerlink" title="设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片"></a>设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c">g_pfnVectors:<br>  .word  _estack                        <span class="hljs-comment">/* Top of Stack */</span><br>  .word  Reset_Handler                  <span class="hljs-comment">/* Reset Handler */</span><br>  .word  NMI_Handler                    <span class="hljs-comment">/* NMI Handler */</span><br>  .word  HardFault_Handler              <span class="hljs-comment">/* Hard Fault Handler */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  SVC_Handler                    <span class="hljs-comment">/* SVCall Handler */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  PendSV_Handler                 <span class="hljs-comment">/* PendSV Handler */</span><br>  .word  SysTick_Handler                <span class="hljs-comment">/* SysTick Handler */</span><br><br>  .word WDT_IRQHandler            <span class="hljs-comment">/* 0 Watch Dog Timer Interrupt Handler         */</span><br>  .word LVD_IRQHandler            <span class="hljs-comment">/* 1 Low Voltage Detect Interrupt Handler      */</span><br>  .word RTC_IRQHandler            <span class="hljs-comment">/* 2 Real Time Clock Interrupt Handler         */</span><br>  .word FLASHRAM_IRQHandler       <span class="hljs-comment">/* 3 Flash/RAM Interrupt Handler               */</span><br>  .word SYSCTRL_IRQHandler        <span class="hljs-comment">/* 4 System Control Interrupt Handler          */</span><br>  .word GPIOA_IRQHandler          <span class="hljs-comment">/* 5 GPIOA Interrupt Handler                   */</span><br>  .word GPIOB_IRQHandler          <span class="hljs-comment">/* 6 GPIOB Interrupt Handler                   */</span><br>  .word Default_Handler           <span class="hljs-comment">/* 7 Reserved                                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 8 Reserved                                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 9 Reserved                                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 10 Reserved                                 */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 11 Reserved                                 */</span><br>  .word ADC_IRQHandler            <span class="hljs-comment">/* 12 ADC Interrupt Handler                    */</span><br>  .word ATIM_IRQHandler           <span class="hljs-comment">/* 13 Advanced Timer Interrupt Handler         */</span><br>  .word VC1_IRQHandler            <span class="hljs-comment">/* 14 Voltage Comparator 1 Interrupt Handler   */</span><br>  .word VC2_IRQHandler            <span class="hljs-comment">/* 15 Voltage Comparator 2 Interrupt Handler   */</span><br>  .word GTIM1_IRQHandler          <span class="hljs-comment">/* 16 General Timer1 Interrupt Handler         */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 17 Reserved                                 */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 18 Reserved                                 */</span><br>  .word LPTIM_IRQHandler          <span class="hljs-comment">/* 19 Low Power Timer Interrupt Handler        */</span><br>  .word BTIM1_IRQHandler          <span class="hljs-comment">/* 20 Base Timer1 Interrupt Handler            */</span><br>  .word BTIM2_IRQHandler          <span class="hljs-comment">/* 21 Base Timer2 Interrupt Handler            */</span><br>  .word BTIM3_IRQHandler          <span class="hljs-comment">/* 22 Base Timer3 Interrupt Handler            */</span><br>  .word I2C1_IRQHandler           <span class="hljs-comment">/* 23 I2C1 Interrupt Handler                   */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 24 Reserved                                 */</span><br>  .word SPI1_IRQHandler           <span class="hljs-comment">/* 25 SPI Interrupt Handler                    */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 26 Reserved                                 */</span><br>  .word UART1_IRQHandler          <span class="hljs-comment">/* 27 UART1 Interrupt Handler                  */</span><br>  .word UART2_IRQHandler          <span class="hljs-comment">/* 28 UART2 Interrupt Handler                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 29 Reserved                                 */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 30 Reserved                                 */</span><br>  .word CLKFAULT_IRQHandler       <span class="hljs-comment">/* 31 Clock Fault Interrupt Handler            */</span><br><br></code></pre></td></tr></table></figure><h3 id="弱定义函数"><a href="#弱定义函数" class="headerlink" title="弱定义函数"></a>弱定义函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*******************************************************************************</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*为Default_Handler的每个异常处理程序提供弱别名。</span><br><span class="hljs-comment">*由于它们是弱别名，任何同名的函数都将被覆盖</span><br><span class="hljs-comment">*这个定义。</span><br><span class="hljs-comment">*禁止在此重复弱定义Reset_Handler！！！</span><br><span class="hljs-comment">*******************************************************************************/</span><br>  .weak      NMI_Handler<br>  .thumb_set NMI_Handler,Default_Handler<br><br>  .weak      HardFault_Handler<br>  .thumb_set HardFault_Handler,Default_Handler<br><br>  .weak      SVC_Handler<br>  .thumb_set SVC_Handler,Default_Handler<br><br>  .weak      PendSV_Handler<br>  .thumb_set PendSV_Handler,Default_Handler<br><br>  .weak      SysTick_Handler<br>  .thumb_set SysTick_Handler,Default_Handler<br><br>  .weak      WDT_IRQHandler<br>  .thumb_set WDT_IRQHandler,Default_Handler<br><br>  .weak      LVD_IRQHandler<br>  .thumb_set LVD_IRQHandler,Default_Handler<br><br>  .weak      RTC_IRQHandler<br>  .thumb_set RTC_IRQHandler,Default_Handler<br><br>  .weak      FLASHRAM_IRQHandler<br>  .thumb_set FLASHRAM_IRQHandler,Default_Handler<br><br>  .weak      SYSCTRL_IRQHandler<br>  .thumb_set SYSCTRL_IRQHandler,Default_Handler<br><br>  .weak      GPIOA_IRQHandler<br>  .thumb_set GPIOA_IRQHandler,Default_Handler<br><br>  .weak      GPIOB_IRQHandler<br>  .thumb_set GPIOB_IRQHandler,Default_Handler<br><br>  .weak      ADC_IRQHandler<br>  .thumb_set ADC_IRQHandler,Default_Handler<br><br>  .weak      ATIM_IRQHandler<br>  .thumb_set ATIM_IRQHandler,Default_Handler<br><br>  .weak      VC1_IRQHandler<br>  .thumb_set VC1_IRQHandler,Default_Handler<br><br>  .weak      VC2_IRQHandler<br>  .thumb_set VC2_IRQHandler,Default_Handler<br><br>  .weak      GTIM1_IRQHandler<br>  .thumb_set GTIM1_IRQHandler,Default_Handler<br><br>  .weak      LPTIM_IRQHandler<br>  .thumb_set LPTIM_IRQHandler,Default_Handler<br><br>  .weak      BTIM1_IRQHandler<br>  .thumb_set BTIM1_IRQHandler,Default_Handler<br><br>  .weak      BTIM2_IRQHandler<br>  .thumb_set BTIM2_IRQHandler,Default_Handler<br><br>  .weak      BTIM3_IRQHandler<br>  .thumb_set BTIM3_IRQHandler,Default_Handler<br><br>  .weak      I2C1_IRQHandler<br>  .thumb_set I2C1_IRQHandler,Default_Handler<br><br>  .weak      SPI1_IRQHandler<br>  .thumb_set SPI1_IRQHandler,Default_Handler<br><br>  .weak      UART1_IRQHandler<br>  .thumb_set UART1_IRQHandler,Default_Handler<br><br>  .weak      UART2_IRQHandler<br>  .thumb_set UART2_IRQHandler,Default_Handler<br><br>  .weak      CLKFAULT_IRQHandler<br>  .thumb_set CLKFAULT_IRQHandler,Default_Handler<br><br></code></pre></td></tr></table></figure><h2 id="CW32L010-EIDE-TEMPLATE"><a href="#CW32L010-EIDE-TEMPLATE" class="headerlink" title="CW32L010-EIDE-TEMPLATE"></a><a href="https://github.com/Ankali-Aylina/CW32L010-EIDE-template">CW32L010-EIDE-TEMPLATE</a></h2><h2 id="这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。-s启动文件也已经同步上传，可以参考。"><a href="#这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。-s启动文件也已经同步上传，可以参考。" class="headerlink" title="这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。.s启动文件也已经同步上传，可以参考。"></a>这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。.s启动文件也已经同步上传，可以参考。</h2>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
      <category>CW32L010</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CW32L010</tag>
      
      <tag>GNU启动文件</tag>
      
      <tag>启动文件解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并非HelloWorld</title>
    <link href="/2025/05/01/%E5%B9%B6%E9%9D%9EHelloWorld/"/>
    <url>/2025/05/01/%E5%B9%B6%E9%9D%9EHelloWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="朋友你好！欢迎来到兔兔报社！"><a href="#朋友你好！欢迎来到兔兔报社！" class="headerlink" title="朋友你好！欢迎来到兔兔报社！"></a>朋友你好！欢迎来到兔兔报社！</h1><h2 id="首先感谢背景原画老师：Eternal-Frost"><a href="#首先感谢背景原画老师：Eternal-Frost" class="headerlink" title="首先感谢背景原画老师：Eternal-Frost"></a>首先感谢背景原画老师：<a href="https://space.bilibili.com/391459669">Eternal-Frost</a></h2><p><img src="Eternal-Frost-origin.png" srcset="/img/loading.gif" lazyload alt="Eternal-Frost-origin"></p><h2 id="感谢Hexo和Fluid的作者"><a href="#感谢Hexo和Fluid的作者" class="headerlink" title="感谢Hexo和Fluid的作者"></a>感谢<a href="https://hexo.io/">Hexo</a>和<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>的作者</h2><h3 id="在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了（原网站名为Tree-NetWork）。"><a href="#在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了（原网站名为Tree-NetWork）。" class="headerlink" title="在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了（原网站名为Tree NetWork）。"></a>在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了（原网站名为Tree NetWork）。</h3><h3 id="希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！"><a href="#希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！" class="headerlink" title="希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！"></a>希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！</h3>]]></content>
    
    
    
    <tags>
      
      <tag>介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
