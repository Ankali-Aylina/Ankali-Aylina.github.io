<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>智能散热小桌板</title>
    <link href="/2025/05/05/IRSTB/"/>
    <url>/2025/05/05/IRSTB/</url>
    
    <content type="html"><![CDATA[<h1 id="智能散热小桌板"><a href="#智能散热小桌板" class="headerlink" title="智能散热小桌板"></a>智能散热小桌板</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p><del>智能散热小桌板是一款基于CW32L010芯片开发的智能散热小桌板。它集成了蓝牙、风扇、LED灯功能，可以实时监测桌面的温湿度，并根据温度自动调节风扇转速，为用户提供舒适的使用环境。</del><br>简单来说就是能根据电脑温度自动调节风扇转速的散热小桌板。</p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li>实时监测电脑的温度</li><li>根据温度自动调节风扇转速</li><li>使用蓝牙连接</li></ul><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><ul><li>主控芯片：CW32L010</li><li>蓝牙模块：DX-BT24-T</li><li>风扇：12V直流风扇(利民的12025风扇)</li></ul>]]></content>
    
    
    <categories>
      
      <category>嵌入式 CW32L010 智能散热小桌板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CW32L010</tag>
      
      <tag>蓝牙</tag>
      
      <tag>散热小桌板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CW32L010适配GNU启动文件解析</title>
    <link href="/2025/05/01/CW32L010%E9%80%82%E9%85%8DGNU%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <url>/2025/05/01/CW32L010%E9%80%82%E9%85%8DGNU%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="CW32L010适配GNU启动文件解析"><a href="#CW32L010适配GNU启动文件解析" class="headerlink" title="CW32L010适配GNU启动文件解析"></a>CW32L010适配GNU启动文件解析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为keil开发单片机实在是手感不太好，所以打算使用GNU工具链进行开发，因此找到了VSCode上的EIDE插件，但是GNU工具链的启动文件和keil的启动文件还是有一些区别的，所以打算记录一下GNU启动文件的结构，方便以后查阅。</p><p>ps：本文基于CW32L010的GNU启动文件进行解析,主要放在启动文件（.s文件）的解析。由于我也是新手一个，文章中可能存在错误，欢迎指正。</p><h2 id="GNU启动文件的结构"><a href="#GNU启动文件的结构" class="headerlink" title="GNU启动文件的结构"></a>GNU启动文件的结构</h2><h3 id="首先需要定义汇编语法，定义处理器，浮点运算，指令集。"><a href="#首先需要定义汇编语法，定义处理器，浮点运算，指令集。" class="headerlink" title="首先需要定义汇编语法，定义处理器，浮点运算，指令集。"></a>首先需要定义汇编语法，定义处理器，浮点运算，指令集。</h3><p>因为CW32l010是M0+内核，所以使用的是Cortex-M0+处理器，软件浮点运算(M0+无硬件FPU)，Thumb指令集。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">.syntax unified <span class="hljs-comment">// 启用统一的ARM/Thumb汇编语法。</span><br>.cpu cortex-m0plus <span class="hljs-comment">// 使用Cortex-M0+处理器</span><br>.fpu softvfp <span class="hljs-comment">// 使用软件浮点运算，M0+无硬件FPU</span><br>.thumb <span class="hljs-comment">// 使用Thumb指令集</span><br></code></pre></td></tr></table></figure><h3 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h3><ol><li>定义一个全局符号g_pfnVectors之后用来存储中断向量表。</li><li>定义一个全局函数Default_Handler，用来处理中断向量表中的异常（防止程序跑飞）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">.global g_pfnVectors <span class="hljs-comment">// 声明全局变量g_pfnVectors</span><br>.global Default_Handler <span class="hljs-comment">// 声明全局函数Default_Handler</span><br></code></pre></td></tr></table></figure><h3 id="定义几个重要的地址"><a href="#定义几个重要的地址" class="headerlink" title="定义几个重要的地址"></a>定义几个重要的地址</h3><h4 id="在开始这段内容讲解前，我们需要先明白几个知识点"><a href="#在开始这段内容讲解前，我们需要先明白几个知识点" class="headerlink" title="在开始这段内容讲解前，我们需要先明白几个知识点"></a>在开始这段内容讲解前，我们需要先明白几个知识点</h4><p>我们所编写的代码在上电之前都是存储在Flash中的，上电之后，代码会被加载到RAM中，所以我们需要定义一些地址，来表示Flash和RAM中的地址，完成初始化。</p><ol><li>.data data段存放着已经初始化过且不为0的全局变量和静态变量，一开始放在Flash中，上电之后，会被加载到RAM中。</li><li>.bss BSS段存放着未初始化的或者初始化为0的全局变量和静态变量，一开始放在Flash中，上电之后，会被加载到RAM中。</li><li>_sidata 定义的是在FLash中data段的起始<strong>地址</strong></li><li>_sdata 定义的是在RAM中data段的起始<strong>地址</strong></li><li>_edata 定义的是在RAM中data段的结束<strong>地址</strong></li><li>_sbss 定义的是在RAM中bss段的起始<strong>地址</strong></li><li>_ebss 定义的是在RAM中bss段的结束<strong>地址</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* start address for the initialization values of the .data section.</span><br><span class="hljs-comment">defined in linker script */</span><br><br>```c<br><span class="hljs-comment">/* start address for the initialization values of the .data section.</span><br><span class="hljs-comment">defined in linker script */</span><br><span class="hljs-comment">/* .data data段 Flash中初始化数据的起始地址 */</span><br>.word _sidata<br><br><span class="hljs-comment">/* start address for the .data section. defined in linker script */</span><br><span class="hljs-comment">/* .data data段 RAM中数据段的起始地址 */</span><br>.word _sdata<br><br><span class="hljs-comment">/* end address for the .data section. defined in linker script */</span><br><span class="hljs-comment">/* .data data段 RAM中数据段的结束地址 */</span><br>.word _edata<br><br><span class="hljs-comment">/* start address for the .bss section. defined in linker script */</span><br><span class="hljs-comment">/* .bss BSS段（未初始化全局变量）的起始地址 */</span><br>.word _sbss<br><br><span class="hljs-comment">/* end address for the .bss section. defined in linker script */</span><br><span class="hljs-comment">/* .bss BSS段（未初始化全局变量）的结束地址 */</span><br>.word _ebss<br></code></pre></td></tr></table></figure><h3 id="定义Reset-Handler函数"><a href="#定义Reset-Handler函数" class="headerlink" title="定义Reset_Handler函数"></a>定义Reset_Handler函数</h3><p>定义一个Reset_Handler函数，用于初始化RAM和系统调用main函数。</p><ol><li>定义一个名为 .text.Reset_Handler 的代码段（Section），专门存放 Reset_Handler 函数的代码。</li><li>将 Reset_Handler 声明为 弱符号（Weak Symbol）。</li><li>将 Reset_Handler 声明为 函数类型（Function Type）。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*定义一个名为 .text.Reset_Handler 的代码段（Section），专门存放 Reset_Handler 函数的代码 */</span><br>.section .text.Reset_Handler<br><br><span class="hljs-comment">/*将 Reset_Handler 声明为 弱符号（Weak Symbol） */</span><br>.weak Reset_Handler<br><br><span class="hljs-comment">/*将 Reset_Handler 声明为 函数类型（Function Type） */</span><br><span class="hljs-comment">/*%function：表示符号是函数类型 */</span><br>.type Reset_Handler, %function<br></code></pre></td></tr></table></figure><h3 id="定义Reset-Handler函数的内容"><a href="#定义Reset-Handler函数的内容" class="headerlink" title="定义Reset_Handler函数的内容"></a>定义Reset_Handler函数的内容</h3><ol><li>设置栈指针，将栈指针指向_estack，也就是栈顶地址。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Reset_Handler:<br>  ldr   r0, =_estack    <span class="hljs-comment">/* 获取栈顶地址 */</span><br>  mov   sp, r0          <span class="hljs-comment">/* set stack pointer 设置栈指针 */</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将Flash中的初始化数据复制到RAM中，也就是将Flash中的data段复制到RAM中。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">  ldr r0, =_sdata       <span class="hljs-comment">// 加载_sdata的地址到r0寄存器（data段起始地址）</span><br>  ldr r1, =_edata       <span class="hljs-comment">// 加载_edata的地址到r1寄存器（data段终止地址）</span><br>  ldr r2, =_sidata      <span class="hljs-comment">// 加载_sidata的地址到r2寄存器（Flash中的初始化数据）</span><br>  movs r3, #<span class="hljs-number">0</span>           <span class="hljs-comment">// 将0移动到r3寄存器</span><br>  b LoopCopyDataInit    <span class="hljs-comment">// 跳转到LoopCopyDataInit标签</span><br><br>CopyDataInit:<br>  ldr r4, [r2, r3]      <span class="hljs-comment">// 从r2寄存器加上r3寄存器的值所指向的内存地址中，将数据加载到r4寄存器中（加载Flash中的初始化数据到r4）</span><br>  str r4, [r0, r3]      <span class="hljs-comment">// 将r4寄存器中的数据存储到r0寄存器加上r3寄存器的值所指向的内存地址中(将r4中的数据存储到RAM中)</span><br>  adds r3, r3, #<span class="hljs-number">4</span>       <span class="hljs-comment">// 将r3寄存器的值加上4，并将结果存储到r3寄存器中(移动到下一个地址继续复制)</span><br><br><br>LoopCopyDataInit:<br>  adds r4, r0, r3       <span class="hljs-comment">// 将RAM数据段起始地址与r3寄存器的值相加，并将结果存储到r4寄存器中(将r4的数据替换为data段下一位地址)</span><br>  cmp r4, r1            <span class="hljs-comment">// 对比r4寄存器与RAM数据段结束地址（查看当前是否到达了RAM 数据段的结束地址）</span><br>  bcc CopyDataInit      <span class="hljs-comment">// 如果r4寄存器的值小于r1寄存器的值（未到达RAM的数据段结束地址），则跳转到CopyDataInit标签</span><br></code></pre></td></tr></table></figure><ol start="3"><li>将BSS段清零，也就是将RAM中的bss段清零。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Zero fill the bss segment. */</span><br><span class="hljs-comment">/*零填充bss区段。*/</span><br>  ldr r2, =_sbss        <span class="hljs-comment">// 将_sbss的地址加载到r2寄存器中（bss段起始地址）</span><br>  ldr r4, =_ebss        <span class="hljs-comment">// 将_ebss的地址加载到r4寄存器中（bss段终止地址）</span><br>  movs r3, #<span class="hljs-number">0</span>           <span class="hljs-comment">// 将0移动到r3寄存器中（bss段的填充数值）</span><br>  b LoopFillZerobss     <span class="hljs-comment">// 跳转到LoopFillZerobss标签处</span><br><br>FillZerobss:<br>  str  r3, [r2]         <span class="hljs-comment">// 将r3寄存器中的值存储到r2寄存器所指向的内存地址中（将r2地址指向的数值填充为0）</span><br>  adds r2, r2, #<span class="hljs-number">4</span>       <span class="hljs-comment">// 将r2寄存器的值加上4，并将结果存储到r2寄存器中（移动到下一个地址继续填充）</span><br><br>LoopFillZerobss:<br>  cmp r2, r4          <span class="hljs-comment">// 比较r2寄存器与_ebss的地址（如果到达结束地址的下一位地址则取消填充）</span><br>  bcc FillZerobss     <span class="hljs-comment">// 如果r2寄存器的值小于_ebss的地址（是否达到bss段的结束地址），则跳转到FillZerobss标签处</span><br></code></pre></td></tr></table></figure><ol start="4"><li>初始化系统时钟，初始化静态构造函数，调用main函数。最后进入死循环。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Call the clock system initialization function.*/</span><br><span class="hljs-comment">/*调用时钟系统初始化函数。*/</span><br>  bl  SystemInit<br><br><span class="hljs-comment">/* Call static constructors */</span><br><span class="hljs-comment">/*调用静态构造函数*/</span><br>  bl __libc_init_array<br><br><span class="hljs-comment">/* Call the application s entry point.*/</span><br><span class="hljs-comment">/*调用应用程序的入口点。*/</span><br>  bl main<br><br>LoopForever:<br>  b LoopForever<br></code></pre></td></tr></table></figure><ol start="5"><li>设置Reset_Handle的大小</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">/*设置Reset_Handle的大小，值为：当前位置-（减去）Reset_Handler的起始位置 */</span><br> <span class="hljs-comment">/*.表示当前地址 Reset_Handler 表示 Reset_Handler 的起始位置*/</span><br>.size Reset_Handler, .-Reset_Handler<br></code></pre></td></tr></table></figure><h3 id="到这里可以说是设置好了整个Reset-Handler函数，接下来我们还需要设置Default-Handler函数，用于处理中断向量表中的异常（防止程序跑飞）"><a href="#到这里可以说是设置好了整个Reset-Handler函数，接下来我们还需要设置Default-Handler函数，用于处理中断向量表中的异常（防止程序跑飞）" class="headerlink" title="到这里可以说是设置好了整个Reset_Handler函数，接下来我们还需要设置Default_Handler函数，用于处理中断向量表中的异常（防止程序跑飞）"></a>到这里可以说是设置好了整个Reset_Handler函数，接下来我们还需要设置Default_Handler函数，用于处理中断向量表中的异常（防止程序跑飞）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//*定义一个名为 .text.Default_Handler 的代码段（Section） */</span><br><span class="hljs-comment">/*.text段用于存储可执行代码 */</span><br><span class="hljs-comment">/*&quot;ax&quot;为段属性标志 a:表示该段需要分配内存，x:表示该段可执行 */</span><br><span class="hljs-comment">/*%progbits：段类型，表示该段包含实际数据（代码或初始化数据） */</span><br>  .section .text.Default_Handler,<span class="hljs-string">&quot;ax&quot;</span>,%progbits<br><br><span class="hljs-comment">/*Default_Handler：定义一个默认中断符号，出现未定义的中断触发时将跳转到这里 */</span><br>Default_Handler:<br><br><span class="hljs-comment">/*Infinite_Loop：定义一个循环符号， b Infinite_Loop：无条件跳转到Infinite_Loop实现死循环。 */</span><br><span class="hljs-comment">/*用途：当出现未被定义的中断时跳转至此进行死循环防止程序跑飞 */</span><br>Infinite_Loop:<br>  b Infinite_Loop<br><br><span class="hljs-comment">/*设置 Default_Handler 的大小，值为：当前位置-（减去）Default_Handler的起始位置 */</span><br><span class="hljs-comment">/*.表示当前地址 Default_Handler 表示 Default_Handler 的起始位置*/</span><br>  .size Default_Handler, .-Default_Handler<br></code></pre></td></tr></table></figure><h3 id="设置中断函数"><a href="#设置中断函数" class="headerlink" title="设置中断函数"></a>设置中断函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*定义一个名为 .isr_vector 的段（Section），专门用于存放中断向量表 */</span><br><span class="hljs-comment">/*&quot;a&quot;段属性标志 a:表示该段需要分配内存 */</span><br><span class="hljs-comment">/*%progbits：段类型，表示该段包含实际数据（中断服务函数的地址） */</span><br>.section .isr_vector,<span class="hljs-string">&quot;a&quot;</span>,%progbits<br><br><span class="hljs-comment">/*声明符号 g_pfnVectors 的类型为数据对象 */</span><br><span class="hljs-comment">/*%object：表示符号对应的是一个数据对象（如数组、结构体等） */</span><br><span class="hljs-comment">/*g_pfnVectors 是一个函数指针数组，每个元素指向一个中断服务函数 */</span><br>.type g_pfnVectors, %object<br><br><span class="hljs-comment">/*设置 g_pfnVectors 的大小为当前位置减去 g_pfnVectors 的起始位置 */</span><br><span class="hljs-comment">/*设置符号 g_pfnVectors 的大小为整个中断向量表的字节长度 */</span><br>.size g_pfnVectors, .-g_pfnVectors<br></code></pre></td></tr></table></figure><h3 id="设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片"><a href="#设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片" class="headerlink" title="设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片"></a>设置中断向量表，不同内核中断向量表并不一致，这个需要参考对应的芯片</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c">g_pfnVectors:<br>  .word  _estack                        <span class="hljs-comment">/* Top of Stack */</span><br>  .word  Reset_Handler                  <span class="hljs-comment">/* Reset Handler */</span><br>  .word  NMI_Handler                    <span class="hljs-comment">/* NMI Handler */</span><br>  .word  HardFault_Handler              <span class="hljs-comment">/* Hard Fault Handler */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  SVC_Handler                    <span class="hljs-comment">/* SVCall Handler */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  Default_Handler                              <span class="hljs-comment">/* Reserved */</span><br>  .word  PendSV_Handler                 <span class="hljs-comment">/* PendSV Handler */</span><br>  .word  SysTick_Handler                <span class="hljs-comment">/* SysTick Handler */</span><br><br>  .word WDT_IRQHandler            <span class="hljs-comment">/* 0 Watch Dog Timer Interrupt Handler         */</span><br>  .word LVD_IRQHandler            <span class="hljs-comment">/* 1 Low Voltage Detect Interrupt Handler      */</span><br>  .word RTC_IRQHandler            <span class="hljs-comment">/* 2 Real Time Clock Interrupt Handler         */</span><br>  .word FLASHRAM_IRQHandler       <span class="hljs-comment">/* 3 Flash/RAM Interrupt Handler               */</span><br>  .word SYSCTRL_IRQHandler        <span class="hljs-comment">/* 4 System Control Interrupt Handler          */</span><br>  .word GPIOA_IRQHandler          <span class="hljs-comment">/* 5 GPIOA Interrupt Handler                   */</span><br>  .word GPIOB_IRQHandler          <span class="hljs-comment">/* 6 GPIOB Interrupt Handler                   */</span><br>  .word Default_Handler           <span class="hljs-comment">/* 7 Reserved                                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 8 Reserved                                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 9 Reserved                                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 10 Reserved                                 */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 11 Reserved                                 */</span><br>  .word ADC_IRQHandler            <span class="hljs-comment">/* 12 ADC Interrupt Handler                    */</span><br>  .word ATIM_IRQHandler           <span class="hljs-comment">/* 13 Advanced Timer Interrupt Handler         */</span><br>  .word VC1_IRQHandler            <span class="hljs-comment">/* 14 Voltage Comparator 1 Interrupt Handler   */</span><br>  .word VC2_IRQHandler            <span class="hljs-comment">/* 15 Voltage Comparator 2 Interrupt Handler   */</span><br>  .word GTIM1_IRQHandler          <span class="hljs-comment">/* 16 General Timer1 Interrupt Handler         */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 17 Reserved                                 */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 18 Reserved                                 */</span><br>  .word LPTIM_IRQHandler          <span class="hljs-comment">/* 19 Low Power Timer Interrupt Handler        */</span><br>  .word BTIM1_IRQHandler          <span class="hljs-comment">/* 20 Base Timer1 Interrupt Handler            */</span><br>  .word BTIM2_IRQHandler          <span class="hljs-comment">/* 21 Base Timer2 Interrupt Handler            */</span><br>  .word BTIM3_IRQHandler          <span class="hljs-comment">/* 22 Base Timer3 Interrupt Handler            */</span><br>  .word I2C1_IRQHandler           <span class="hljs-comment">/* 23 I2C1 Interrupt Handler                   */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 24 Reserved                                 */</span><br>  .word SPI1_IRQHandler           <span class="hljs-comment">/* 25 SPI Interrupt Handler                    */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 26 Reserved                                 */</span><br>  .word UART1_IRQHandler          <span class="hljs-comment">/* 27 UART1 Interrupt Handler                  */</span><br>  .word UART2_IRQHandler          <span class="hljs-comment">/* 28 UART2 Interrupt Handler                  */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 29 Reserved                                 */</span><br>  .word Default_Handler                         <span class="hljs-comment">/* 30 Reserved                                 */</span><br>  .word CLKFAULT_IRQHandler       <span class="hljs-comment">/* 31 Clock Fault Interrupt Handler            */</span><br><br></code></pre></td></tr></table></figure><h3 id="弱定义函数"><a href="#弱定义函数" class="headerlink" title="弱定义函数"></a>弱定义函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*******************************************************************************</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*为Default_Handler的每个异常处理程序提供弱别名。</span><br><span class="hljs-comment">*由于它们是弱别名，任何同名的函数都将被覆盖</span><br><span class="hljs-comment">*这个定义。</span><br><span class="hljs-comment">*禁止在此重复弱定义Reset_Handler！！！</span><br><span class="hljs-comment">*******************************************************************************/</span><br>  .weak      NMI_Handler<br>  .thumb_set NMI_Handler,Default_Handler<br><br>  .weak      HardFault_Handler<br>  .thumb_set HardFault_Handler,Default_Handler<br><br>  .weak      SVC_Handler<br>  .thumb_set SVC_Handler,Default_Handler<br><br>  .weak      PendSV_Handler<br>  .thumb_set PendSV_Handler,Default_Handler<br><br>  .weak      SysTick_Handler<br>  .thumb_set SysTick_Handler,Default_Handler<br><br>  .weak      WDT_IRQHandler<br>  .thumb_set WDT_IRQHandler,Default_Handler<br><br>  .weak      LVD_IRQHandler<br>  .thumb_set LVD_IRQHandler,Default_Handler<br><br>  .weak      RTC_IRQHandler<br>  .thumb_set RTC_IRQHandler,Default_Handler<br><br>  .weak      FLASHRAM_IRQHandler<br>  .thumb_set FLASHRAM_IRQHandler,Default_Handler<br><br>  .weak      SYSCTRL_IRQHandler<br>  .thumb_set SYSCTRL_IRQHandler,Default_Handler<br><br>  .weak      GPIOA_IRQHandler<br>  .thumb_set GPIOA_IRQHandler,Default_Handler<br><br>  .weak      GPIOB_IRQHandler<br>  .thumb_set GPIOB_IRQHandler,Default_Handler<br><br>  .weak      ADC_IRQHandler<br>  .thumb_set ADC_IRQHandler,Default_Handler<br><br>  .weak      ATIM_IRQHandler<br>  .thumb_set ATIM_IRQHandler,Default_Handler<br><br>  .weak      VC1_IRQHandler<br>  .thumb_set VC1_IRQHandler,Default_Handler<br><br>  .weak      VC2_IRQHandler<br>  .thumb_set VC2_IRQHandler,Default_Handler<br><br>  .weak      GTIM1_IRQHandler<br>  .thumb_set GTIM1_IRQHandler,Default_Handler<br><br>  .weak      LPTIM_IRQHandler<br>  .thumb_set LPTIM_IRQHandler,Default_Handler<br><br>  .weak      BTIM1_IRQHandler<br>  .thumb_set BTIM1_IRQHandler,Default_Handler<br><br>  .weak      BTIM2_IRQHandler<br>  .thumb_set BTIM2_IRQHandler,Default_Handler<br><br>  .weak      BTIM3_IRQHandler<br>  .thumb_set BTIM3_IRQHandler,Default_Handler<br><br>  .weak      I2C1_IRQHandler<br>  .thumb_set I2C1_IRQHandler,Default_Handler<br><br>  .weak      SPI1_IRQHandler<br>  .thumb_set SPI1_IRQHandler,Default_Handler<br><br>  .weak      UART1_IRQHandler<br>  .thumb_set UART1_IRQHandler,Default_Handler<br><br>  .weak      UART2_IRQHandler<br>  .thumb_set UART2_IRQHandler,Default_Handler<br><br>  .weak      CLKFAULT_IRQHandler<br>  .thumb_set CLKFAULT_IRQHandler,Default_Handler<br><br></code></pre></td></tr></table></figure><h2 id="CW32L010-EIDE-TEMPLATE"><a href="#CW32L010-EIDE-TEMPLATE" class="headerlink" title="CW32L010-EIDE-TEMPLATE"></a><a href="https://github.com/Ankali-Aylina/CW32L010-EIDE-template">CW32L010-EIDE-TEMPLATE</a></h2><h2 id="这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。-s启动文件也已经同步上传，可以参考。"><a href="#这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。-s启动文件也已经同步上传，可以参考。" class="headerlink" title="这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。.s启动文件也已经同步上传，可以参考。"></a>这是一个基于CW32L010的EIDE模板，用于快速开发基于CW32L010的嵌入式项目。.s启动文件也已经同步上传，可以参考。</h2>]]></content>
    
    
    <categories>
      
      <category>嵌入式 CW32L010</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GNU启动文件</tag>
      
      <tag>CW32L010</tag>
      
      <tag>启动文件解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并非HelloWorld</title>
    <link href="/2025/05/01/%E5%B9%B6%E9%9D%9EHelloWorld/"/>
    <url>/2025/05/01/%E5%B9%B6%E9%9D%9EHelloWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="朋友你好！欢迎来到兔兔报社！"><a href="#朋友你好！欢迎来到兔兔报社！" class="headerlink" title="朋友你好！欢迎来到兔兔报社！"></a>朋友你好！欢迎来到兔兔报社！</h1><h2 id="首先感谢背景原画老师：Eternal-Frost"><a href="#首先感谢背景原画老师：Eternal-Frost" class="headerlink" title="首先感谢背景原画老师：Eternal-Frost"></a>首先感谢背景原画老师：<a href="https://space.bilibili.com/391459669">Eternal-Frost</a></h2><p><img src="Eternal-Frost-origin.png" alt="Eternal-Frost-origin"></p><h2 id="感谢Hexo和Fluid的作者"><a href="#感谢Hexo和Fluid的作者" class="headerlink" title="感谢Hexo和Fluid的作者"></a>感谢<a href="https://hexo.io/">Hexo</a>和<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>的作者</h2><h3 id="在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了。"><a href="#在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了。" class="headerlink" title="在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了。"></a>在三年前该网站被搭建并且上传，但是我并没有积极地进行维护，因此本站被重建了。</h3><h3 id="希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！"><a href="#希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！" class="headerlink" title="希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！"></a>希望你能在这个网站找到你想要的答案，那么接下来祝你旅途愉快！</h3>]]></content>
    
    
    
    <tags>
      
      <tag>介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
